<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>springboot学习笔记1</title>
    <url>/2020/03/04/springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<center>springboot入门</center>

<a id="more"></a>

<!--toc-->

<h2><span id="1-spring-boot-jian-jie">1、Spring Boot 简介</span><a href="#1-spring-boot-jian-jie" class="header-anchor">#</a></h2><blockquote>
<p>简化Spring应用开发的一个框架；</p>
<p>整个Spring技术栈的一个大整合；</p>
<p>J2EE开发的一站式解决方案；</p>
</blockquote>
<h2><span id="2-wei-fu-wu">2、微服务</span><a href="#2-wei-fu-wu" class="header-anchor">#</a></h2><p>2014，martin fowler</p>
<p>微服务：架构风格（服务微化）</p>
<p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p>
<p>单体应用：ALL IN ONE</p>
<p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p>
<p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa" target="_blank" rel="noopener">详细参照微服务文档</a></p>
<h2><span id="3-spring-boot-helloworld">3、Spring Boot HelloWorld</span><a href="#3-spring-boot-helloworld" class="header-anchor">#</a></h2><p>一个功能：</p>
<p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p>
<h3><span id="1-chuang-jian-yi-ge-maven-gong-cheng-jar">1、创建一个maven工程；（jar）</span><a href="#1-chuang-jian-yi-ge-maven-gong-cheng-jar" class="header-anchor">#</a></h3><h3><span id="2-dao-ru-spring-boot-xiang-guan-de-yi-lai">2、导入spring boot相关的依赖</span><a href="#2-dao-ru-spring-boot-xiang-guan-de-yi-lai" class="header-anchor">#</a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3><span id="3-bian-xie-yi-ge-zhu-cheng-xu-qi-dong-spring-boot-ying-yong">3、编写一个主程序；启动Spring Boot应用</span><a href="#3-bian-xie-yi-ge-zhu-cheng-xu-qi-dong-spring-boot-ying-yong" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="4-bian-xie-xiang-guan-de-controller-service">4、编写相关的Controller、Service</span><a href="#4-bian-xie-xiang-guan-de-controller-service" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="5-yun-xing-zhu-cheng-xu-ce-shi">5、运行主程序测试</span><a href="#5-yun-xing-zhu-cheng-xu-ce-shi" class="header-anchor">#</a></h3><h3><span id="6-jian-hua-bu-shu">6、简化部署</span><a href="#6-jian-hua-bu-shu" class="header-anchor">#</a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p>
<h2><span id="4-hello-world-tan-jiu">4、Hello World探究</span><a href="#4-hello-world-tan-jiu" class="header-anchor">#</a></h2><h3><span id="1-pom-wen-jian">1、POM文件</span><a href="#1-pom-wen-jian" class="header-anchor">#</a></h3><h4><span id="1-fu-xiang-mu">1、父项目</span><a href="#1-fu-xiang-mu" class="header-anchor">#</a></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目是</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">他来真正管理Spring Boot应用里面的所有依赖版本；</span><br></pre></td></tr></table></figure>

<p>Spring Boot的版本仲裁中心；</p>
<p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p>
<h4><span id="2-qi-dong-qi">2、启动器</span><a href="#2-qi-dong-qi" class="header-anchor">#</a></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>spring-boot-starter-web</strong>：</p>
<p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p>
<p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p>
<h3><span id="2-zhu-cheng-xu-lei-zhu-ru-kou-lei">2、主程序类，主入口类</span><a href="#2-zhu-cheng-xu-lei-zhu-ru-kou-lei" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@<strong>SpringBootApplication</strong>: Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">      @<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p>
<p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p>
<p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p>
<p>​            配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p>
<p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p>
<p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p>
<p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p>
<p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p>
<p>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；</p>
<p>​    @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p>
<p>​        给容器中导入组件？</p>
<p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p>
<p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p>
<p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；        </p>
<p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p>
<p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</p>
<p>Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；以前我们需要自己配置的东西，自动配置类都帮我们；</p>
<p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p>
<hr>
<h1><span id="er-pei-zhi-wen-jian">二、配置文件</span><a href="#er-pei-zhi-wen-jian" class="header-anchor">#</a></h1><h2><span id="1-pei-zhi-wen-jian">1、配置文件</span><a href="#1-pei-zhi-wen-jian" class="header-anchor">#</a></h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p>
<p>•application.properties</p>
<p>•application.yml</p>
<p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p>
<p>YAML（YAML Ain’t Markup Language）</p>
<p>​    YAML  A Markup Language：是一个标记语言</p>
<p>​    YAML   isn’t Markup Language：不是一个标记语言；</p>
<p>标记语言：</p>
<p>​    以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p>
<p>​    YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p>
<p>​    YAML：配置例子</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<p>​    XML：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2><span id="2-yaml-yu-fa">2、YAML语法：</span><a href="#2-yaml-yu-fa" class="header-anchor">#</a></h2><h3><span id="1-ji-ben-yu-fa">1、基本语法</span><a href="#1-ji-ben-yu-fa" class="header-anchor">#</a></h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p>
<p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure>

<p>属性和值也是大小写敏感；</p>
<h3><span id="2-zhi-de-xie-fa">2、值的写法</span><a href="#2-zhi-de-xie-fa" class="header-anchor">#</a></h3><h4><span id="zi-mian-liang-pu-tong-de-zhi-shu-zi-zi-fu-chuan-bu-er">字面量：普通的值（数字，字符串，布尔）</span><a href="#zi-mian-liang-pu-tong-de-zhi-shu-zi-zi-fu-chuan-bu-er" class="header-anchor">#</a></h4><p>​    k: v：字面直接来写；</p>
<p>​        字符串默认不用加上单引号或者双引号；</p>
<p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p>
<p>​                name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p>
<p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p>
<p>​                name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p>
<h4><span id="dui-xiang-map-shu-xing-he-zhi-jian-zhi-dui">对象、Map（属性和值）（键值对）：</span><a href="#dui-xiang-map-shu-xing-he-zhi-jian-zhi-dui" class="header-anchor">#</a></h4><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p>
<p>​        对象还是k: v的方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">		<span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">		<span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>



<h4><span id="shu-zu-list-set">数组（List、Set）：</span><a href="#shu-zu-list-set" class="header-anchor">#</a></h4><p>用- 值表示数组中的一个元素</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure>



<h2><span id="3-pei-zhi-wen-jian-zhi-zhu-ru">3、配置文件值注入</span><a href="#3-pei-zhi-wen-jian-zhi-zhu-ru" class="header-anchor">#</a></h2><p>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">lastName:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">    <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line">    <span class="attr">maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="number">12</span><span class="string">&#125;</span></span><br><span class="line">    <span class="attr">lists:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zhaoliu</span></span><br><span class="line">    <span class="attr">dog:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">小狗</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>javaBean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<p>我们可以导入配置文件处理器，以后编写配置就有提示了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4><span id="1-properties-pei-zhi-wen-jian-zai-idea-zhong-mo-ren-utf-8-ke-neng-hui-luan-ma">1、properties配置文件在idea中默认utf-8可能会乱码</span><a href="#1-properties-pei-zhi-wen-jian-zai-idea-zhong-mo-ren-utf-8-ke-neng-hui-luan-ma" class="header-anchor">#</a></h4><p>调整 file setting</p>
<h4><span id="2-value-huo-qu-zhi-he-configurationproperties-huo-qu-zhi-bi-jiao">2、@Value获取值和@ConfigurationProperties获取值比较</span><a href="#2-value-huo-qu-zhi-he-configurationproperties-huo-qu-zhi-bi-jiao" class="header-anchor">#</a></h4><table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定（松散语法）</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<p>配置文件yml还是properties他们都能获取到值；</p>
<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p>
<p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p>
<h4><span id="3-pei-zhi-wen-jian-zhu-ru-zhi-shu-ju-xiao-yan">3、配置文件注入值数据校验</span><a href="#3-pei-zhi-wen-jian-zhu-ru-zhi-shu-ju-xiao-yan" class="header-anchor">#</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<h4><span id="4-propertysource-amp-importresource-amp-bean">4、@PropertySource&amp;@ImportResource&amp;@Bean</span><a href="#4-propertysource-amp-importresource-amp-bean" class="header-anchor">#</a></h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ConfigurationProperties</span>(prefix = "person")默认从全局配置文件中获取值；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">   <span class="comment">// @Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br></pre></td></tr></table></figure>

<p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p>
<p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p>
<p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br><span class="line">导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure>

<p>不来编写Spring的配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.springboot.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p>
<p>1、配置类<strong>@Configuration</strong>——&gt;Spring配置文件</p>
<p>2、使用<strong>@Bean</strong>给容器中添加组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置类@Bean给容器中添加组件了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="4-pei-zhi-wen-jian-zhan-wei-fu">4、配置文件占位符</span><a href="#4-pei-zhi-wen-jian-zhan-wei-fu" class="header-anchor">#</a></h2><h3><span id="1-sui-ji-shu">1、随机数</span><a href="#1-sui-ji-shu" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="keyword">int</span>&#125;、$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="2-zhan-wei-fu-huo-qu-zhi-qian-pei-zhi-de-zhi-ru-guo-mei-you-ke-yi-shi-yong-zhi-ding-mo-ren-zhi">2、占位符获取之前配置的值，如果没有可以是用:指定默认值</span><a href="#2-zhan-wei-fu-huo-qu-zhi-qian-pei-zhi-de-zhi-ru-guo-mei-you-ke-yi-shi-yong-zhi-ding-mo-ren-zhi" class="header-anchor">#</a></h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">person.last-name</span>=<span class="string">张三$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="meta">person.birth</span>=<span class="string">2017/12/15</span></span><br><span class="line"><span class="meta">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="meta">person.maps.k2</span>=<span class="string">14</span></span><br><span class="line"><span class="meta">person.lists</span>=<span class="string">a,b,c</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">$&#123;person.hello:hello&#125;_dog</span></span><br><span class="line"><span class="meta">person.dog.age</span>=<span class="string">15</span></span><br></pre></td></tr></table></figure>

<h2><span id="5-profile">5、Profile</span><a href="#5-profile" class="header-anchor">#</a></h2><h3><span id="1-duo-profile-wen-jian">1、多Profile文件</span><a href="#1-duo-profile-wen-jian" class="header-anchor">#</a></h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p>
<p>默认使用application.properties的配置；</p>
<h3><span id="2-yml-zhi-chi-duo-wen-dang-kuai-fang-shi">2、yml支持多文档块方式</span><a href="#2-yml-zhi-chi-duo-wen-dang-kuai-fang-shi" class="header-anchor">#</a></h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure>

<h3><span id="3-ji-huo-zhi-ding-profile">3、激活指定profile</span><a href="#3-ji-huo-zhi-ding-profile" class="header-anchor">#</a></h3><p>​    1、在配置文件中指定  spring.profiles.active=dev</p>
<p>​    2、命令行：</p>
<p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p>
<p>​        可以直接在测试的时候，配置传入命令行参数</p>
<p>​    3、虚拟机参数；</p>
<p>​        -Dspring.profiles.active=dev</p>
<h2><span id="6-pei-zhi-wen-jian-jia-zai-wei-zhi">6、配置文件加载位置</span><a href="#6-pei-zhi-wen-jian-jia-zai-wei-zhi" class="header-anchor">#</a></h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>
<p>–file:./config/</p>
<p>–file:./</p>
<p>–classpath:/config/</p>
<p>–classpath:/</p>
<p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p>
<p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p>
<p>我们还可以通过spring.config.location来改变默认的配置文件位置</p>
<p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p>
<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p>
<h2><span id="7-wai-bu-pei-zhi-jia-zai-shun-xu">7、外部配置加载顺序</span><a href="#7-wai-bu-pei-zhi-jia-zai-shun-xu" class="header-anchor">#</a></h2><p><strong>SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置</strong></p>
<p><strong>1.命令行参数</strong></p>
<p>所有的配置都可以在命令行上进行指定</p>
<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p>
<p>多个配置用空格分开； –配置项=值</p>
<p>2.来自java:comp/env的JNDI属性</p>
<p>3.Java系统属性（System.getProperties()）</p>
<p>4.操作系统环境变量</p>
<p>5.RandomValuePropertySource配置的random.*属性值</p>
<p><strong>由jar包外向jar包内进行寻找；</strong></p>
<p><strong>优先加载带profile</strong></p>
<p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
<p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
<p><strong>再来加载不带profile</strong></p>
<p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
<p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
<p>10.@Configuration注解类上的@PropertySource</p>
<p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p>
<p>所有支持的配置加载来源；</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p>
<h2><span id="8-zi-dong-pei-zhi-yuan-li">8、自动配置原理</span><a href="#8-zi-dong-pei-zhi-yuan-li" class="header-anchor">#</a></h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">配置文件能配置的属性参照</a></p>
<h3><span id="1-zi-dong-pei-zhi-yuan-li">1、<strong>自动配置原理：</strong></span><a href="#1-zi-dong-pei-zhi-yuan-li" class="header-anchor">#</a></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</p>
<p><strong>2）、@EnableAutoConfiguration 作用：</strong></p>
<ul>
<li>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</li>
</ul>
<ul>
<li><p>可以查看selectImports()方法的内容；</p>
</li>
<li><p>List<string> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</string></p>
<ul>
<li><pre><code class="java">SpringFactoriesLoader.loadFactoryNames()
扫描所有jar包类路径下  META-INF/spring.factories
把扫描到的这些文件的内容包装成properties对象
从properties中获取到EnableAutoConfiguration<span class="class">.<span class="keyword">class</span>类（类名）对应的值，然后把他们添加在容器中</span>
<span class="class"></span>
<span class="class"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">**将 类路径下  META-INF&#x2F;spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；**</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;properties</span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure></span>
<span class="class"></span></code></pre>
</li>
</ul>
</li>
</ul>
<p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p>
<p>3）、每一个自动配置类进行自动配置功能；</p>
<p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpEncodingProperties<span class="class">.<span class="keyword">class</span>)  //启动指定类的<span class="title">ConfigurationProperties</span>功能；将配置文件中对应的值和<span class="title">HttpEncodingProperties</span>绑定起来；并把<span class="title">HttpEncodingProperties</span>加入到<span class="title">ioc</span>容器中</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span> //<span class="title">Spring</span>底层@<span class="title">Conditional</span>注解（<span class="title">Spring</span>注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是<span class="title">web</span>应用，如果是，当前配置类生效</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnClass</span>(<span class="title">CharacterEncodingFilter</span>.<span class="title">class</span>)  //判断当前项目有没有这个类<span class="title">CharacterEncodingFilter</span>；<span class="title">SpringMVC</span>中进行乱码解决的过滤器；</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">prefix</span> </span>= <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)  <span class="comment">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span></span><br><span class="line"><span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span>(CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>) //判断容器没有这个组件？</span></span><br><span class="line"><span class="class">	<span class="title">public</span> <span class="title">CharacterEncodingFilter</span> <span class="title">characterEncodingFilter</span>() </span>&#123;</span><br><span class="line">		CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">		filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">		filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">		filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">		<span class="keyword">return</span> filter;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>根据当前不同的条件判断，决定这个配置类是否生效？</p>
<p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p>
<p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.http.encoding"</span>)  <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure>

<p><strong>精髓：</strong></p>
<p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p>
<p>​    <strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p>
<p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p>
<p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p>
<p>xxxxAutoConfigurartion：自动配置类；</p>
<p>给容器中添加组件</p>
<p>xxxxProperties:封装配置文件中相关属性；</p>
<h3><span id="2-xi-jie">2、细节</span><a href="#2-xi-jie" class="header-anchor">#</a></h3><h4><span id="1-conditional-pai-sheng-zhu-jie-spring-zhu-jie-ban-yuan-sheng-de-conditional-zuo-yong">1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</span><a href="#1-conditional-pai-sheng-zhu-jie-spring-zhu-jie-ban-yuan-sheng-de-conditional-zuo-yong" class="header-anchor">#</a></h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>
<table>
<thead>
<tr>
<th>@Conditional扩展注解</th>
<th>作用（判断是否满足当前指定条件）</th>
</tr>
</thead>
<tbody><tr>
<td>@ConditionalOnJava</td>
<td>系统的java版本是否符合要求</td>
</tr>
<tr>
<td>@ConditionalOnBean</td>
<td>容器中存在指定Bean；</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>容器中不存在指定Bean；</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足SpEL表达式指定</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>系统中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>系统中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中指定的属性是否有指定的值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否存在指定资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是web环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>当前不是web环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI存在指定项</td>
</tr>
</tbody></table>
<p><strong>自动配置类必须在一定的条件下才能生效；</strong></p>
<p>我们怎么知道哪些自动配置类生效；</p>
<p><strong>我们可以通过启用  debug=true属性；来让控制台打印自动配置报告</strong>，这样我们就可以很方便的知道哪些自动配置类生效；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">=========================</span><br><span class="line">AUTO-CONFIGURATION REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:（自动配置类启用的）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnClass</span> found required <span class="class"><span class="keyword">class</span> '<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>'</span>; <span class="meta">@ConditionalOnMissingClass</span> <span class="function">did not find unwanted <span class="title">class</span> <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function">      - @<span class="title">ConditionalOnWebApplication</span> <span class="params">(required)</span> found <span class="title">StandardServletEnvironment</span> <span class="params">(OnWebApplicationCondition)</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">Negative matches:（没有启动，没有匹配成功的自动配置类）</span></span><br><span class="line"><span class="function">-----------------</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   ActiveMQAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   AopAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice' <span class="params">(OnClassCondition)</span></span></span><br></pre></td></tr></table></figure>

<h1><span id="san-ri-zhi">三、日志</span><a href="#san-ri-zhi" class="header-anchor">#</a></h1><h2><span id="1-ri-zhi-kuang-jia">1、日志框架</span><a href="#1-ri-zhi-kuang-jia" class="header-anchor">#</a></h2><p><strong>市面上的日志框架；</strong></p>
<p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p>
<table>
<thead>
<tr>
<th>日志门面  （日志的抽象层）</th>
<th>日志实现</th>
</tr>
</thead>
<tbody><tr>
<td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td>
<td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td>
</tr>
</tbody></table>
<p>左边选一个门面（抽象层）、右边来选一个实现；</p>
<p>日志门面：  SLF4J；</p>
<p>日志实现：Logback；</p>
<p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p>
<p>​    <strong>SpringBoot选用 SLF4j和logback；</strong></p>
<h2><span id="2-slf4j-shi-yong">2、SLF4j使用</span><a href="#2-slf4j-shi-yong" class="header-anchor">#</a></h2><h3><span id="1-ru-he-zai-xi-tong-zhong-shi-yong-slf4j-https-www-slf4j-org">1、如何在系统中使用SLF4j   </span><a href="#1-ru-he-zai-xi-tong-zhong-shi-yong-slf4j-https-www-slf4j-org" class="header-anchor">#</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p>
<p>给系统里面导入slf4j的jar和  logback的实现jar</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图示；</p>
<img src="/2020/03/04/springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/concrete-bindings.png" class title="concrete-bindings">

<p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p>
<h3><span id="2-yi-liu-wen-ti">2、遗留问题</span><a href="#2-yi-liu-wen-ti" class="header-anchor">#</a></h3><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p>
<p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p>
<img src="/2020/03/04/springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/legacy.png" class title="legacy">

<p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p>
<p>1、将系统中其他日志框架先排除出去；</p>
<p>2、用中间包来替换原有的日志框架；</p>
<p>3、我们导入slf4j其他的实现</p>
<h2><span id="3-springboot-ri-zhi-guan-xi">3、SpringBoot日志关系</span><a href="#3-springboot-ri-zhi-guan-xi" class="header-anchor">#</a></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SpringBoot使用它来做日志功能；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>底层依赖关系</p>
<img src="/2020/03/04/springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png" class title="依赖关系">

<p>总结：</p>
<p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p>
<p>​    2）、SpringBoot也把其他的日志都替换成了slf4j；</p>
<p>​    3）、中间替换包？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class="string">"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> LogFactory logFactory = <span class="keyword">new</span> SLF4JLogFactory();</span><br></pre></td></tr></table></figure>

<p>​    4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p>
<p>​            Spring框架用的是commons-logging；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；</strong></p>
<h2><span id="4-ri-zhi-shi-yong">4、日志使用；</span><a href="#4-ri-zhi-shi-yong" class="header-anchor">#</a></h2><h3><span id="1-mo-ren-pei-zhi">1、默认配置</span><a href="#1-mo-ren-pei-zhi" class="header-anchor">#</a></h3><p>SpringBoot默认帮我们配置好了日志；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记录器</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//System.out.println();</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//日志的级别；</span></span><br><span class="line">	<span class="comment">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line">	<span class="comment">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span></span><br><span class="line">	logger.trace(<span class="string">"这是trace日志..."</span>);</span><br><span class="line">	logger.debug(<span class="string">"这是debug日志..."</span>);</span><br><span class="line">	<span class="comment">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span></span><br><span class="line">	logger.info(<span class="string">"这是info日志..."</span>);</span><br><span class="line">	logger.warn(<span class="string">"这是warn日志..."</span>);</span><br><span class="line">	logger.error(<span class="string">"这是error日志..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<pre><code>日志输出格式：
    %d表示日期时间，
    %thread表示线程名，
    %-5level：级别从左显示5个字符宽度
    %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 
    %msg：日志消息，
    %n是换行符
--&gt;
%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</code></pre><p>SpringBoot修改日志的默认配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.level.com.atguigu</span>=<span class="string">trace</span></span><br><span class="line"><span class="comment">#logging.path=</span></span><br><span class="line"><span class="comment"># 不指定路径在当前项目下生成springboot.log日志</span></span><br><span class="line"><span class="comment"># 可以指定完整的路径；</span></span><br><span class="line"><span class="comment">#logging.file=G:/springboot.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span></span><br><span class="line"><span class="meta">logging.path</span>=<span class="string">/spring/log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  在控制台输出的日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"><span class="comment"># 指定文件中日志输出的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>logging.file</th>
<th>logging.path</th>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>(none)</td>
<td>(none)</td>
<td></td>
<td>只在控制台输出</td>
</tr>
<tr>
<td>指定文件名</td>
<td>(none)</td>
<td>my.log</td>
<td>输出日志到my.log文件</td>
</tr>
<tr>
<td>(none)</td>
<td>指定目录</td>
<td>/var/log</td>
<td>输出到指定目录的 spring.log 文件中</td>
</tr>
</tbody></table>
<h3><span id="2-zhi-ding-pei-zhi">2、指定配置</span><a href="#2-zhi-ding-pei-zhi" class="header-anchor">#</a></h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>Customization</th>
</tr>
</thead>
<tbody><tr>
<td>Logback</td>
<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td>
</tr>
<tr>
<td>Log4j2</td>
<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>
</tr>
<tr>
<td>JDK (Java Util Logging)</td>
<td><code>logging.properties</code></td>
</tr>
</tbody></table>
<p>logback.xml：直接就被日志框架识别了；</p>
<p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">  	可以指定某段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">			%d表示日期时间，</span></span><br><span class="line"><span class="comment">			%thread表示线程名，</span></span><br><span class="line"><span class="comment">			%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">			%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class="line"><span class="comment">			%msg：日志消息，</span></span><br><span class="line"><span class="comment">			%n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p>
<p> <code>no applicable action for [springProfile]</code></p>
<h2><span id="5-qie-huan-ri-zhi-kuang-jia">5、切换日志框架</span><a href="#5-qie-huan-ri-zhi-kuang-jia" class="header-anchor">#</a></h2><p>可以按照slf4j的日志适配图，进行相关的切换；</p>
<p>slf4j+log4j的方式；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>切换为log4j2</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础</title>
    <url>/2020/02/26/python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<center>python基础</center>

<a id="more"></a>

<!--toc-->

<h2><span id="lei-xing-yu-yun-suan">类型与运算</span><a href="#lei-xing-yu-yun-suan" class="header-anchor">#</a></h2><h3><span id="lei-xing-pan-duan">类型判断</span><a href="#lei-xing-pan-duan" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- 寻求帮助:</span></span><br><span class="line">    dir(obj)            <span class="comment"># 简单的列出对象obj所包含的方法名称，返回一个字符串列表</span></span><br><span class="line">    help(obj.func)      <span class="comment"># 查询obj.func的具体介绍和用法</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 测试类型的三种方法，推荐第三种</span></span><br><span class="line">    <span class="keyword">if</span> type(L) == type([]):</span><br><span class="line">        print(<span class="string">"L is list"</span>)</span><br><span class="line">    <span class="keyword">if</span> type(L) == list:</span><br><span class="line">        print(<span class="string">"L is list"</span>)</span><br><span class="line">    <span class="keyword">if</span> isinstance(L, list):</span><br><span class="line">        print(<span class="string">"L is list"</span>)</span><br></pre></td></tr></table></figure>

<h3><span id="shu-ju-lei-xing">数据类型</span><a href="#shu-ju-lei-xing" class="header-anchor">#</a></h3><p>hash类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 哈希类型，即在原地不能改变的变量类型，不可变类型。可利用hash函数查看其hash值，也可以作为字典的key</span></span><br><span class="line">    <span class="string">"数字类型：int, float, decimal.Decimal, fractions.Fraction, complex"</span></span><br><span class="line">    <span class="string">"字符串类型：str, bytes"</span></span><br><span class="line">    <span class="string">"元组：tuple"</span></span><br><span class="line">    <span class="string">"冻结集合：frozenset"</span></span><br><span class="line">    <span class="string">"布尔类型：True, False"</span></span><br><span class="line">    <span class="string">"None"</span></span><br></pre></td></tr></table></figure>

<p>不可hash类型：原地可变类型：list、dict和set。它们不可以作为字典的key。</p>
<p>数字常量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- 数字常量</span></span><br><span class="line">    <span class="number">1234</span>, <span class="number">-1234</span>, <span class="number">0</span>, <span class="number">999999999</span>                    <span class="comment"># 整数</span></span><br><span class="line">    <span class="number">1.23</span>, <span class="number">1.</span>, <span class="number">3.14e-10</span>, <span class="number">4E210</span>, <span class="number">4.0e+210</span>          <span class="comment"># 浮点数</span></span><br><span class="line">    <span class="number">0o177</span>, <span class="number">0x9ff</span>, <span class="number">0X9FF</span>, <span class="number">0b101010</span>                <span class="comment"># 八进制、十六进制、二进制数字</span></span><br><span class="line">    <span class="number">3</span>+<span class="number">4j</span>, <span class="number">3.0</span>+<span class="number">4.0j</span>, <span class="number">3J</span>                           <span class="comment"># 复数常量，也可以用complex(real, image)来创建</span></span><br><span class="line">    hex(I), oct(I), bin(I)                       <span class="comment"># 将十进制数转化为十六进制、八进制、二进制表示的“字符串”</span></span><br><span class="line">    int(string, base)                            <span class="comment"># 将字符串转化为整数，base为进制数</span></span><br><span class="line">    <span class="comment"># 2.x中，有两种整数类型：一般整数（32位）和长整数（无穷精度）。可以用l或L结尾，迫使一般整数成为长整数</span></span><br><span class="line">    float(<span class="string">'inf'</span>), float(<span class="string">'-inf'</span>), float(<span class="string">'nan'</span>)    <span class="comment"># 无穷大, 无穷小, 非数</span></span><br></pre></td></tr></table></figure>

<h2><span id="biao-da-shi-cao-zuo-fu">表达式操作符</span><a href="#biao-da-shi-cao-zuo-fu" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- 数字的表达式操作符</span></span><br><span class="line">    <span class="keyword">yield</span> x                                      <span class="comment"># 生成器函数发送协议</span></span><br><span class="line">    <span class="keyword">lambda</span> args: expression                      <span class="comment"># 生成匿名函数</span></span><br><span class="line">    x <span class="keyword">if</span> y <span class="keyword">else</span> z                                <span class="comment"># 三元选择表达式</span></span><br><span class="line">    x <span class="keyword">and</span> y, x <span class="keyword">or</span> y, <span class="keyword">not</span> x                       <span class="comment"># 逻辑与、逻辑或、逻辑非</span></span><br><span class="line">    x <span class="keyword">in</span> y, x <span class="keyword">not</span> <span class="keyword">in</span> y                           <span class="comment"># 成员对象测试</span></span><br><span class="line">    x <span class="keyword">is</span> y, x <span class="keyword">is</span> <span class="keyword">not</span> y                           <span class="comment"># 对象实体测试</span></span><br><span class="line">    x&lt;y, x&lt;=y, x&gt;y, x&gt;=y, x==y, x!=y             <span class="comment"># 大小比较，集合子集或超集值相等性操作符</span></span><br><span class="line">    <span class="number">1</span> &lt; a &lt; <span class="number">3</span>                                    <span class="comment"># Python中允许连续比较</span></span><br><span class="line">    x|y, x&amp;y, x^y                                <span class="comment"># 位或、位与、位异或</span></span><br><span class="line">    x&lt;&lt;y, x&gt;&gt;y                                   <span class="comment"># 位操作：x左移、右移y位</span></span><br><span class="line">    +, -, *, /, //, %, **                        <span class="comment"># 真除法、floor除法：返回不大于真除法结果的整数值、取余、幂运算</span></span><br><span class="line">    -x, +x, ~x                                   <span class="comment"># 一元减法、识别、按位求补（取反）</span></span><br><span class="line">    x[i], x[i:j:k]                               <span class="comment"># 索引、分片</span></span><br><span class="line">    int(<span class="number">3.14</span>), float(<span class="number">3</span>)                          <span class="comment"># 强制类型转换</span></span><br><span class="line"><span class="comment">#-- 整数可以利用bit_length函数测试所占的位数</span></span><br><span class="line">    a = <span class="number">1</span>;       a.bit_length()    <span class="comment"># 1</span></span><br><span class="line">    a = <span class="number">1024</span>;    a.bit_length()    <span class="comment"># 11</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- repr和str显示格式的区别</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    repr格式：默认的交互模式回显，产生的结果看起来它们就像是代码。</span></span><br><span class="line"><span class="string">    str格式：打印语句，转化成一种对用户更加友好的格式。</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>



<h2><span id="shu-xue-xiang-guan-mo-kuai">数学相关模块</span><a href="#shu-xue-xiang-guan-mo-kuai" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># math模块</span></span><br><span class="line">    <span class="comment"># Decimal模块：小数模块</span></span><br><span class="line">        <span class="keyword">import</span> decimal</span><br><span class="line">        <span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line">        Decimal(<span class="string">"0.01"</span>) + Decimal(<span class="string">"0.02"</span>)        <span class="comment"># 返回Decimal("0.03")</span></span><br><span class="line">        decimal.getcontext().prec = <span class="number">4</span>            <span class="comment"># 设置全局精度为4 即小数点后边4位</span></span><br><span class="line">    <span class="comment"># Fraction模块：分数模块</span></span><br><span class="line">        <span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line">        x = Fraction(<span class="number">4</span>, <span class="number">6</span>)                       <span class="comment"># 分数类型 4/6</span></span><br><span class="line">        x = Fraction(<span class="string">"0.25"</span>)                     <span class="comment"># 分数类型 1/4 接收字符串类型的参数</span></span><br></pre></td></tr></table></figure>

<h2><span id="ji-he-set">集合set</span><a href="#ji-he-set" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- 集合set</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    set是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素。</span></span><br><span class="line"><span class="string">    set支持union(联合), intersection(交), difference(差)和symmetric difference(对称差集)等数学运算。</span></span><br><span class="line"><span class="string">    set支持x in set, len(set), for x in set。</span></span><br><span class="line"><span class="string">    set不记录元素位置或者插入点, 因此不支持indexing, slicing, 或其它类序列的操作</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    s = set([<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">10</span>])                          <span class="comment"># 创建一个数值集合，返回&#123;3, 5, 9, 10&#125;</span></span><br><span class="line">    t = set(<span class="string">"Hello"</span>)                             <span class="comment"># 创建一个字符的集合，返回&#123;'l', 'H', 'e', 'o'&#125;</span></span><br><span class="line">    a = t | s;    t.union(s)                     <span class="comment"># t 和 s的并集</span></span><br><span class="line">    b = t &amp; s;    t.intersection(s)              <span class="comment"># t 和 s的交集</span></span><br><span class="line">    c = t – s;    t.difference(s)                <span class="comment"># 求差集（项在t中, 但不在s中）</span></span><br><span class="line">    d = t ^ s;    t.symmetric_difference(s)      <span class="comment"># 对称差集（项在t或s中, 但不会同时出现在二者中）</span></span><br><span class="line">    t.add(<span class="string">'x'</span>);   t.remove(<span class="string">'H'</span>)                  <span class="comment"># 增加/删除一个item</span></span><br><span class="line">    s.update([<span class="number">10</span>,<span class="number">37</span>,<span class="number">42</span>])                         <span class="comment"># 利用[......]更新s集合</span></span><br><span class="line">    x <span class="keyword">in</span> s,  x <span class="keyword">not</span> <span class="keyword">in</span> s                          <span class="comment"># 集合中是否存在某个值</span></span><br><span class="line">    s.issubset(t);      s &lt;= t                   <span class="comment"># 测试是否 s 中的每一个元素都在 t 中</span></span><br><span class="line">    s.issuperset(t);    s &gt;= t                   <span class="comment"># 测试是否 t 中的每一个元素都在 s 中 </span></span><br><span class="line">    s.copy(); </span><br><span class="line">    s.discard(x);                                <span class="comment"># 删除s中x</span></span><br><span class="line">    s.clear()                                    <span class="comment"># 清空s</span></span><br><span class="line">    &#123;x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;                 <span class="comment"># 集合解析，结果：&#123;16, 1, 4, 9&#125;</span></span><br><span class="line">    &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'spam'</span>&#125;                          <span class="comment"># 集合解析，结果：&#123;'a', 'p', 's', 'm'&#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 集合frozenset，不可变对象</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    set是可变对象，即不存在hash值，不能作为字典的键值。同样的还有list等(tuple是可以作为字典key的)</span></span><br><span class="line"><span class="string">    frozenset是不可变对象，即存在hash值，可作为字典的键值</span></span><br><span class="line"><span class="string">    frozenset对象没有add、remove等方法，但有union/intersection/difference等方法</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    a = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">    b = set()</span><br><span class="line">    b.add(a)                     <span class="comment"># error: set是不可哈希类型</span></span><br><span class="line">    b.add(frozenset(a))          <span class="comment"># ok，将set变为frozenset，可哈希</span></span><br></pre></td></tr></table></figure>

<h2><span id="bu-er-lei-xing">布尔类型</span><a href="#bu-er-lei-xing" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- 布尔类型bool</span></span><br><span class="line">    type(<span class="literal">True</span>)                   <span class="comment"># 返回&lt;class 'bool'&gt;</span></span><br><span class="line">    isinstance(<span class="literal">False</span>, int)       <span class="comment"># bool类型属于整型，所以返回True</span></span><br><span class="line">    <span class="literal">True</span> == <span class="number">1</span>; <span class="literal">True</span> <span class="keyword">is</span> <span class="number">1</span>         <span class="comment"># 输出(True, False)</span></span><br></pre></td></tr></table></figure>

<h2><span id="dong-tai-lei-xing">动态类型</span><a href="#dong-tai-lei-xing" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- 动态类型简介</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    变量名通过引用，指向对象。</span></span><br><span class="line"><span class="string">    Python中的“类型”属于对象，而不是变量，每个对象都包含有头部信息，比如"类型标示符" "引用计数器"等</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment">#共享引用及在原处修改：对于可变对象，要注意尽量不要共享引用！</span></span><br><span class="line">    <span class="comment">#共享引用和相等测试：</span></span><br><span class="line">        L = [<span class="number">1</span>], M = [<span class="number">1</span>], L <span class="keyword">is</span> M            <span class="comment"># 返回False</span></span><br><span class="line">        L = M = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], L <span class="keyword">is</span> M           <span class="comment"># 返回True，共享引用</span></span><br><span class="line">    <span class="comment">#增强赋值和共享引用：普通+号会生成新的对象，而增强赋值+=会在原处修改</span></span><br><span class="line">        L = M = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">        L = L + [<span class="number">3</span>, <span class="number">4</span>]                      <span class="comment"># L = [1, 2, 3, 4], M = [1, 2]</span></span><br><span class="line">        L += [<span class="number">3</span>, <span class="number">4</span>]                         <span class="comment"># L = [1, 2, 3, 4], M = [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<h2><span id="chang-jian-zi-fu-chuan-chang-liang-he-biao-da-shi">常见字符串常量和表达式</span><a href="#chang-jian-zi-fu-chuan-chang-liang-he-biao-da-shi" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- 常见字符串常量和表达式</span></span><br><span class="line">    S = <span class="string">''</span>                                  <span class="comment"># 空字符串</span></span><br><span class="line">    S = <span class="string">"spam’s"</span>                            <span class="comment"># 双引号和单引号相同</span></span><br><span class="line">    S = <span class="string">"s\np\ta\x00m"</span>                      <span class="comment"># 转义字符</span></span><br><span class="line">    S = <span class="string">"""spam"""</span>                          <span class="comment"># 三重引号字符串，一般用于函数说明</span></span><br><span class="line">    S = <span class="string">r'\temp'</span>                            <span class="comment"># Raw字符串，不会进行转义，抑制转义</span></span><br><span class="line">    S = <span class="string">b'Spam'</span>                             <span class="comment"># Python3中的字节字符串</span></span><br><span class="line">    S = <span class="string">u'spam'</span>                             <span class="comment"># Python2.6中的Unicode字符串</span></span><br><span class="line">    s1+s2, s1*<span class="number">3</span>, s[i], s[i:j], len(s)       <span class="comment"># 字符串操作</span></span><br><span class="line">    <span class="string">'a %s parrot'</span> % <span class="string">'kind'</span>                  <span class="comment"># 字符串格式化表达式</span></span><br><span class="line">    <span class="string">'a &#123;1&#125; &#123;0&#125; parrot'</span>.format(<span class="string">'kind'</span>, <span class="string">'red'</span>)<span class="comment"># 字符串格式化方法</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> s: print(x)                    <span class="comment"># 字符串迭代，成员关系</span></span><br><span class="line">    [x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> s]                        <span class="comment"># 字符串列表解析</span></span><br><span class="line">    <span class="string">','</span>.join([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])               <span class="comment"># 字符串输出，结果：a,b,c</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 内置str处理函数：</span></span><br><span class="line">    str1 = <span class="string">"stringobject"</span></span><br><span class="line">    str1.upper(); str1.lower(); str1.swapcase(); str1.capitalize(); str1.title()        <span class="comment"># 全部大写，全部小写、大小写转换，首字母大写，每个单词的首字母都大写</span></span><br><span class="line">    str1.ljust(width)                       <span class="comment"># 获取固定长度，左对齐，右边不够用空格补齐</span></span><br><span class="line">    str1.rjust(width)                       <span class="comment"># 获取固定长度，右对齐，左边不够用空格补齐</span></span><br><span class="line">    str1.center(width)                      <span class="comment"># 获取固定长度，中间对齐，两边不够用空格补齐</span></span><br><span class="line">    str1.zfill(width)                       <span class="comment"># 获取固定长度，右对齐，左边不足用0补齐</span></span><br><span class="line">    str1.find(<span class="string">'t'</span>,start,end)                <span class="comment"># 查找字符串，可以指定起始及结束位置搜索</span></span><br><span class="line">    str1.rfind(<span class="string">'t'</span>)                         <span class="comment"># 从右边开始查找字符串</span></span><br><span class="line">    str1.count(<span class="string">'t'</span>)                         <span class="comment"># 查找字符串出现的次数</span></span><br><span class="line">    <span class="comment">#上面所有方法都可用index代替，不同的是使用index查找不到会抛异常，而find返回-1</span></span><br><span class="line">    str1.replace(<span class="string">'old'</span>,<span class="string">'new'</span>)               <span class="comment"># 替换函数，替换old为new，参数中可以指定maxReplaceTimes，即替换指定次数的old为new</span></span><br><span class="line">    str1.strip();                           <span class="comment"># 默认删除空白符</span></span><br><span class="line">    str1.strip(<span class="string">'d'</span>);                        <span class="comment"># 删除str1字符串中开头、结尾处，位于 d 删除序列的字符</span></span><br><span class="line">    str1.lstrip();</span><br><span class="line">    str1.lstrip(<span class="string">'d'</span>);                       <span class="comment"># 删除str1字符串中开头处，位于 d 删除序列的字符</span></span><br><span class="line">    str1.rstrip();</span><br><span class="line">    str1.rstrip(<span class="string">'d'</span>)                        <span class="comment"># 删除str1字符串中结尾处，位于 d 删除序列的字符</span></span><br><span class="line">    str1.startswith(<span class="string">'start'</span>)                <span class="comment"># 是否以start开头</span></span><br><span class="line">    str1.endswith(<span class="string">'end'</span>)                    <span class="comment"># 是否以end结尾</span></span><br><span class="line">    str1.isalnum(); str1.isalpha(); str1.isdigit(); str1.islower(); str1.isupper()      <span class="comment"># 判断字符串是否全为字符、数字、小写、大写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 三重引号编写多行字符串块，并且在代码折行处嵌入换行字符\n</span></span><br><span class="line">    mantra = <span class="string">"""hello world</span></span><br><span class="line"><span class="string">            hello python</span></span><br><span class="line"><span class="string">            hello my friend"""</span></span><br><span class="line">    <span class="comment"># mantra为"""hello world \n hello python \n hello my friend"""</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 索引和分片：</span></span><br><span class="line">    S[<span class="number">0</span>], S[len(S)–<span class="number">1</span>], S[<span class="number">-1</span>]                <span class="comment"># 索引</span></span><br><span class="line">    S[<span class="number">1</span>:<span class="number">3</span>], S[<span class="number">1</span>:], S[:<span class="number">-1</span>], S[<span class="number">1</span>:<span class="number">10</span>:<span class="number">2</span>]        <span class="comment"># 分片，第三个参数指定步长，如`S[1:10:2]`是从1位到10位没隔2位获取一个字符。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 字符串转换工具：</span></span><br><span class="line">    int(<span class="string">'42'</span>), str(<span class="number">42</span>)                      <span class="comment"># 返回(42, '42')</span></span><br><span class="line">    float(<span class="string">'4.13'</span>), str(<span class="number">4.13</span>)                <span class="comment"># 返回(4.13, '4.13')</span></span><br><span class="line">    ord(<span class="string">'s'</span>), chr(<span class="number">115</span>)                      <span class="comment"># 返回(115, 's')</span></span><br><span class="line">    int(<span class="string">'1001'</span>, <span class="number">2</span>)                          <span class="comment"># 将字符串作为二进制数字，转化为数字，返回9</span></span><br><span class="line">    bin(<span class="number">13</span>), oct(<span class="number">13</span>), hex(<span class="number">13</span>)               <span class="comment"># 将整数转化为二进制/八进制/十六进制字符串，返回('0b1101', '015', '0xd')</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 另类字符串连接</span></span><br><span class="line">    name = <span class="string">"wang"</span> <span class="string">"hong"</span>                    <span class="comment"># 单行，name = "wanghong"</span></span><br><span class="line">    name = <span class="string">"wang"</span> \</span><br><span class="line">            <span class="string">"hong"</span>                          <span class="comment"># 多行，name = "wanghong"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- Python中的字符串格式化实现1--字符串格式化表达式</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    基于C语言的'print'模型，并且在大多数的现有的语言中使用。</span></span><br><span class="line"><span class="string">    通用结构：%[(name)][flag][width].[precision]typecode</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"this is %d %s bird"</span> % (<span class="number">1</span>, <span class="string">'dead'</span>)                          <span class="comment"># 一般的格式化表达式</span></span><br><span class="line">    <span class="string">"%s---%s---%s"</span> % (<span class="number">42</span>, <span class="number">3.14</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])                      <span class="comment"># 字符串输出：'42---3.14---[1, 2, 3]'</span></span><br><span class="line">    <span class="string">"%d...%6d...%-6d...%06d"</span> % (<span class="number">1234</span>, <span class="number">1234</span>, <span class="number">1234</span>, <span class="number">1234</span>)         <span class="comment"># 对齐方式及填充："1234...  1234...1234  ...001234"</span></span><br><span class="line">    x = <span class="number">1.23456789</span></span><br><span class="line">    <span class="string">"%e | %f | %g"</span> % (x, x, x)                                  <span class="comment"># 对齐方式："1.234568e+00 | 1.234568 | 1.23457"</span></span><br><span class="line">    <span class="string">"%6.2f*%-6.2f*%06.2f*%+6.2f"</span> % (x, x, x, x)                 <span class="comment"># 对齐方式：'  1.23*1.23  *001.23* +1.23'</span></span><br><span class="line">    <span class="string">"%(name1)d---%(name2)s"</span> % &#123;<span class="string">"name1"</span>:<span class="number">23</span>, <span class="string">"name2"</span>:<span class="string">"value2"</span>&#125;    <span class="comment"># 基于字典的格式化表达式</span></span><br><span class="line">    <span class="string">"%(name)s is %(age)d"</span> % vars()                              <span class="comment"># vars()函数调用返回一个字典，包含了所有本函数调用时存在的变量</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- Python中的字符串格式化实现2--字符串格式化调用方法</span></span><br><span class="line">    <span class="comment"># 普通调用</span></span><br><span class="line">    <span class="string">"&#123;0&#125;, &#123;1&#125; and &#123;2&#125;"</span>.format(<span class="string">'spam'</span>, <span class="string">'ham'</span>, <span class="string">'eggs'</span>)            <span class="comment"># 基于位置的调用</span></span><br><span class="line">    <span class="string">"&#123;motto&#125; and &#123;pork&#125;"</span>.format(motto = <span class="string">'spam'</span>, pork = <span class="string">'ham'</span>)   <span class="comment"># 基于Key的调用</span></span><br><span class="line">    <span class="string">"&#123;motto&#125; and &#123;0&#125;"</span>.format(<span class="string">'ham'</span>, motto = <span class="string">'spam'</span>)             <span class="comment"># 混合调用</span></span><br><span class="line">    <span class="comment"># 添加键 属性 偏移量 (import sys)</span></span><br><span class="line">    <span class="string">"my &#123;1[spam]&#125; runs &#123;0.platform&#125;"</span>.format(sys, &#123;<span class="string">'spam'</span>:<span class="string">'laptop'</span>&#125;)                 <span class="comment"># 基于位置的键和属性</span></span><br><span class="line">    <span class="string">"&#123;config[spam]&#125; &#123;sys.platform&#125;"</span>.format(sys = sys, config = &#123;<span class="string">'spam'</span>:<span class="string">'laptop'</span>&#125;)   <span class="comment"># 基于Key的键和属性</span></span><br><span class="line">    <span class="string">"first = &#123;0[0]&#125;, second = &#123;0[1]&#125;"</span>.format([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>])                       <span class="comment"># 基于位置的偏移量</span></span><br><span class="line">    <span class="comment"># 具体格式化</span></span><br><span class="line">    <span class="string">"&#123;0:e&#125;, &#123;1:.3e&#125;, &#123;2:g&#125;"</span>.format(<span class="number">3.14159</span>, <span class="number">3.14159</span>, <span class="number">3.14159</span>)   <span class="comment"># 输出'3.141590e+00, 3.142e+00, 3.14159'</span></span><br><span class="line">    <span class="string">"&#123;fieldname:format_spec&#125;"</span>.format(......)</span><br><span class="line">    <span class="comment"># 说明:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        fieldname是指定参数的一个数字或关键字, 后边可跟可选的".name"或"[index]"成分引用</span></span><br><span class="line"><span class="string">        format_spec ::=  [[fill]align][sign][#][0][width][,][.precision][type]</span></span><br><span class="line"><span class="string">        fill        ::=  &lt;any character&gt;              #填充字符</span></span><br><span class="line"><span class="string">        align       ::=  "&lt;" | "&gt;" | "=" | "^"        #对齐方式</span></span><br><span class="line"><span class="string">        sign        ::=  "+" | "-" | " "              #符号说明</span></span><br><span class="line"><span class="string">        width       ::=  integer                      #字符串宽度</span></span><br><span class="line"><span class="string">        precision   ::=  integer                      #浮点数精度</span></span><br><span class="line"><span class="string">        type        ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 例子:</span></span><br><span class="line">        <span class="string">'=&#123;0:10&#125; = &#123;1:10&#125;'</span>.format(<span class="string">'spam'</span>, <span class="number">123.456</span>)    <span class="comment"># 输出'=spam       =    123.456'</span></span><br><span class="line">        <span class="string">'=&#123;0:&gt;10&#125;='</span>.format(<span class="string">'test'</span>)                    <span class="comment"># 输出'=      test='</span></span><br><span class="line">        <span class="string">'=&#123;0:&lt;10&#125;='</span>.format(<span class="string">'test'</span>)                    <span class="comment"># 输出'=test      ='</span></span><br><span class="line">        <span class="string">'=&#123;0:^10&#125;='</span>.format(<span class="string">'test'</span>)                    <span class="comment"># 输出'=   test   ='</span></span><br><span class="line">        <span class="string">'&#123;0:X&#125;, &#123;1:o&#125;, &#123;2:b&#125;'</span>.format(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)   <span class="comment"># 输出'FF, 377, 11111111'</span></span><br><span class="line">        <span class="string">'My name is &#123;0:&#123;1&#125;&#125;.'</span>.format(<span class="string">'Fred'</span>, <span class="number">8</span>)       <span class="comment"># 输出'My name is Fred    .'  动态指定参数</span></span><br></pre></td></tr></table></figure>

<h2><span id="chang-yong-lie-biao-chang-liang-he-cao-zuo">常用列表常量和操作</span><a href="#chang-yong-lie-biao-chang-liang-he-cao-zuo" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- 常用列表常量和操作</span></span><br><span class="line">    L = [[<span class="number">1</span>, <span class="number">2</span>], <span class="string">'string'</span>, &#123;&#125;]                        <span class="comment"># 嵌套列表</span></span><br><span class="line">    L = list(<span class="string">'spam'</span>)                                  <span class="comment"># 列表初始化</span></span><br><span class="line">    L = list(range(<span class="number">0</span>, <span class="number">4</span>))                             <span class="comment"># 列表初始化</span></span><br><span class="line">    list(map(ord, <span class="string">'spam'</span>))                            <span class="comment"># 列表解析</span></span><br><span class="line">    len(L)                                            <span class="comment"># 求列表长度</span></span><br><span class="line">    L.count(value)                                    <span class="comment"># 求列表中某个值的个数</span></span><br><span class="line">    L.append(obj)                                     <span class="comment"># 向列表的尾部添加数据，比如append(2)，添加元素2</span></span><br><span class="line">    L.insert(index, obj)                              <span class="comment"># 向列表的指定index位置添加数据，index及其之后的数据后移</span></span><br><span class="line">    L.extend(interable)                               <span class="comment"># 通过添加iterable中的元素来扩展列表，比如extend([2])，添加元素2，注意和append的区别</span></span><br><span class="line">    L.index(value, [start, [stop]])                   <span class="comment"># 返回列表中值value的第一个索引</span></span><br><span class="line">    L.pop([index])                                    <span class="comment"># 删除并返回index处的元素，默认为删除并返回最后一个元素</span></span><br><span class="line">    L.remove(value)                                   <span class="comment"># 删除列表中的value值，只删除第一次出现的value的值</span></span><br><span class="line">    L.reverse()                                       <span class="comment"># 反转列表</span></span><br><span class="line">    L.sort(cmp=<span class="literal">None</span>, key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)         <span class="comment"># 排序列表</span></span><br><span class="line">    a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], b = a[<span class="number">10</span>:]                         <span class="comment"># 注意，这里不会引发IndexError异常，只会返回一个空的列表[]</span></span><br><span class="line">    a = [], a += [<span class="number">1</span>]                                  <span class="comment"># 这里实在原有列表的基础上进行操作，即列表的id没有改变</span></span><br><span class="line">    a = [], a = a + [<span class="number">1</span>]                               <span class="comment"># 这里最后的a要构建一个新的列表，即a的id发生了变化</span></span><br><span class="line">     </span><br><span class="line"><span class="comment">#-- 用切片来删除序列的某一段</span></span><br><span class="line">    a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">    a[<span class="number">1</span>:<span class="number">4</span>] = []                                       <span class="comment"># a = [1, 5, 6, 7]</span></span><br><span class="line">    a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">    <span class="keyword">del</span> a[::<span class="number">2</span>]                                        <span class="comment"># 去除偶数项(偶数索引的)，a = [1, 3, 5, 7]</span></span><br></pre></td></tr></table></figure>

<h2><span id="chang-yong-zi-dian-chang-liang-he-cao-zuo">常用字典常量和操作</span><a href="#chang-yong-zi-dian-chang-liang-he-cao-zuo" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- 常用字典常量和操作</span></span><br><span class="line">    D = &#123;&#125;</span><br><span class="line">    D = &#123;<span class="string">'spam'</span>:<span class="number">2</span>, <span class="string">'tol'</span>:&#123;<span class="string">'ham'</span>:<span class="number">1</span>&#125;&#125;                   <span class="comment"># 嵌套字典</span></span><br><span class="line">    D = dict.fromkeys([<span class="string">'s'</span>, <span class="string">'d'</span>], <span class="number">8</span>)                  <span class="comment"># &#123;'s': 8, 'd': 8&#125;</span></span><br><span class="line">    D = dict(name = <span class="string">'tom'</span>, age = <span class="number">12</span>)                  <span class="comment"># &#123;'age': 12, 'name': 'tom'&#125;</span></span><br><span class="line">    D = dict([(<span class="string">'name'</span>, <span class="string">'tom'</span>), (<span class="string">'age'</span>, <span class="number">12</span>)])          <span class="comment"># &#123;'age': 12, 'name': 'tom'&#125;</span></span><br><span class="line">    D = dict(zip([<span class="string">'name'</span>, <span class="string">'age'</span>], [<span class="string">'tom'</span>, <span class="number">12</span>]))       <span class="comment"># &#123;'age': 12, 'name': 'tom'&#125;</span></span><br><span class="line">    D.keys(); D.values(); D.items()                   <span class="comment"># 字典键、值以及键值对</span></span><br><span class="line">    D.get(key, default)                               <span class="comment"># get函数</span></span><br><span class="line">    D.update(D_other)                                 <span class="comment"># 合并字典，如果存在相同的键值，D_other的数据会覆盖掉D的数据</span></span><br><span class="line">    D.pop(key, [D])                                   <span class="comment"># 删除字典中键值为key的项，返回键值为key的值，如果不存在，返回默认值D，否则异常</span></span><br><span class="line">    D.popitem()                                       <span class="comment"># pop字典中随机的一项（一个键值对）</span></span><br><span class="line">    D.setdefault(k[, d])                              <span class="comment"># 设置D中某一项的默认值。如果k存在，则返回D[k]，否则设置D[k]=d，同时返回D[k]。</span></span><br><span class="line">    <span class="keyword">del</span> D                                             <span class="comment"># 删除字典</span></span><br><span class="line">    <span class="keyword">del</span> D[<span class="string">'key'</span>]                                      <span class="comment"># 删除字典的某一项</span></span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> D:   <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> D:                   <span class="comment"># 测试字典键是否存在</span></span><br><span class="line">    <span class="comment"># 字典注意事项：（1）对新索引赋值会添加一项（2）字典键不一定非得是字符串，也可以为任何的不可变对象</span></span><br><span class="line">    <span class="comment"># 不可变对象：调用对象自身的任意方法，也不会改变该对象自身的内容，这些方法会创建新的对象并返回。</span></span><br><span class="line">    <span class="comment"># 字符串、整数、tuple都是不可变对象，dict、set、list都是可变对象</span></span><br><span class="line">    D[(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)] = <span class="number">2</span>                                    <span class="comment"># tuple作为字典的key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 字典解析</span></span><br><span class="line">    D = &#123;k:<span class="number">8</span> <span class="keyword">for</span> k <span class="keyword">in</span> [<span class="string">'s'</span>, <span class="string">'d'</span>]&#125;                     <span class="comment"># &#123;'s': 8, 'd': 8&#125;</span></span><br><span class="line">    D = &#123;k:v <span class="keyword">for</span> (k, v) <span class="keyword">in</span> zip([<span class="string">'name'</span>, <span class="string">'age'</span>], [<span class="string">'tom'</span>, <span class="number">12</span>])&#125;       <span class="comment"># &#123;'age': 12, 'name': tom&#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 字典的特殊方法__missing__：当查找找不到key时，会执行该方法</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Dict</span><span class="params">(dict)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">            self[key] = []</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">    dct = dict()</span><br><span class="line">    dct[<span class="string">"foo"</span>].append(<span class="number">1</span>)    <span class="comment"># 这有点类似于collections.defalutdict</span></span><br><span class="line">    dct[<span class="string">"foo"</span>]              <span class="comment"># [1]</span></span><br></pre></td></tr></table></figure>

<h2><span id="yuan-zu">元组</span><a href="#yuan-zu" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- 元组和列表的唯一区别在于元组是不可变对象，列表是可变对象</span></span><br><span class="line">    a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]           <span class="comment"># a[1] = 0, OK</span></span><br><span class="line">    a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)           <span class="comment"># a[1] = 0, Error</span></span><br><span class="line">    a = ([<span class="number">1</span>, <span class="number">2</span>],)           <span class="comment"># a[0][1] = 0, OK</span></span><br><span class="line">    a = [(<span class="number">1</span>, <span class="number">2</span>)]            <span class="comment"># a[0][1] = 0, Error</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 元组的特殊语法: 逗号和圆括号</span></span><br><span class="line">    D = (<span class="number">12</span>)                <span class="comment"># 此时D为一个整数 即D = 12</span></span><br><span class="line">    D = (<span class="number">12</span>, )              <span class="comment"># 此时D为一个元组 即D = (12, )</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 文件基本操作</span></span><br><span class="line">    output = open(<span class="string">r'C:\spam'</span>, <span class="string">'w'</span>)          <span class="comment"># 打开输出文件，用于写</span></span><br><span class="line">    input = open(<span class="string">'data'</span>, <span class="string">'r'</span>)               <span class="comment"># 打开输入文件，用于读。打开的方式可以为'w', 'r', 'a', 'wb', 'rb', 'ab'等</span></span><br><span class="line">    fp.read([size])                         <span class="comment"># size为读取的长度，以byte为单位</span></span><br><span class="line">    fp.readline([size])                     <span class="comment"># 读一行，如果定义了size，有可能返回的只是一行的一部分</span></span><br><span class="line">    fp.readlines([size])                    <span class="comment"># 把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长。</span></span><br><span class="line">    fp.readable()                           <span class="comment"># 是否可读</span></span><br><span class="line">    fp.write(str)                           <span class="comment"># 把str写到文件中，write()并不会在str后加上一个换行符</span></span><br><span class="line">    fp.writelines(seq)                      <span class="comment"># 把seq的内容全部写到文件中(多行一次性写入)</span></span><br><span class="line">    fp.writeable()                          <span class="comment"># 是否可写</span></span><br><span class="line">    fp.close()                              <span class="comment"># 关闭文件。</span></span><br><span class="line">    fp.flush()                              <span class="comment"># 把缓冲区的内容写入硬盘</span></span><br><span class="line">    fp.fileno()                             <span class="comment"># 返回一个长整型的”文件标签“</span></span><br><span class="line">    fp.isatty()                             <span class="comment"># 文件是否是一个终端设备文件（unix系统中的）</span></span><br><span class="line">    fp.tell()                               <span class="comment"># 返回文件操作标记的当前位置，以文件的开头为原点</span></span><br><span class="line">    fp.next()                               <span class="comment"># 返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。</span></span><br><span class="line">    fp.seek(offset[,whence])                <span class="comment"># 将文件打开操作标记移到offset的位置。whence为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。</span></span><br><span class="line">    fp.seekable()                           <span class="comment"># 是否可以seek</span></span><br><span class="line">    fp.truncate([size])                     <span class="comment"># 把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">'data'</span>): </span><br><span class="line">        print(line)                         <span class="comment"># 使用for语句，比较适用于打开比较大的文件</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'data'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        print(file.readline())              <span class="comment"># 使用with语句，可以保证文件关闭</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'data'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        lines = file.readlines()            <span class="comment"># 一次读入文件所有行，并关闭文件</span></span><br><span class="line">    open(<span class="string">'f.txt'</span>, encoding = <span class="string">'latin-1'</span>)     <span class="comment"># Python3.x Unicode文本文件</span></span><br><span class="line">    open(<span class="string">'f.bin'</span>, <span class="string">'rb'</span>)                     <span class="comment"># Python3.x 二进制bytes文件</span></span><br><span class="line">    <span class="comment"># 文件对象还有相应的属性：buffer closed encoding errors line_buffering name newlines等</span></span><br></pre></td></tr></table></figure>

<h2><span id="yu-fa">语法</span><a href="#yu-fa" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- 赋值语句的形式</span></span><br><span class="line">    spam = <span class="string">'spam'</span>                          <span class="comment"># 基本形式</span></span><br><span class="line">    spam, ham = <span class="string">'spam'</span>, <span class="string">'ham'</span>              <span class="comment"># 元组赋值形式</span></span><br><span class="line">    [spam, ham] = [<span class="string">'s'</span>, <span class="string">'h'</span>]               <span class="comment"># 列表赋值形式</span></span><br><span class="line">    a, b, c, d = <span class="string">'abcd'</span>                    <span class="comment"># 序列赋值形式</span></span><br><span class="line">    a, *b, c = <span class="string">'spam'</span>                      <span class="comment"># 序列解包形式（Python3.x中才有）</span></span><br><span class="line">    spam = ham = <span class="string">'no'</span>                      <span class="comment"># 多目标赋值运算，涉及到共享引用</span></span><br><span class="line">    spam += <span class="number">42</span>                             <span class="comment"># 增强赋值，涉及到共享引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 序列赋值 序列解包</span></span><br><span class="line">    [a, b, c] = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)                  <span class="comment"># a = 1, b = 2, c = 3</span></span><br><span class="line">    a, b, c, d = <span class="string">"spam"</span>                    <span class="comment"># a = 's', b = 'p', c = 'a', d = 'm'</span></span><br><span class="line">    a, b, c = range(<span class="number">3</span>)                     <span class="comment"># a = 0, b = 1, c = 2</span></span><br><span class="line">    a, *b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]                   <span class="comment"># a = 1, b = [2, 3, 4]</span></span><br><span class="line">    *a, b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]                   <span class="comment"># a = [1, 2, 3], b = 4</span></span><br><span class="line">    a, *b, c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]                <span class="comment"># a = 1, b = [2, 3], c = 4</span></span><br><span class="line">    <span class="comment"># 带有*时 会优先匹配*之外的变量 如</span></span><br><span class="line">    a, *b, c = [<span class="number">1</span>, <span class="number">2</span>]                      <span class="comment"># a = 1, c = 2, b = []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- print函数原型</span></span><br><span class="line">    print(value, ..., sep=<span class="string">' '</span>, end=<span class="string">'\n'</span>, file=sys.stdout, flush=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 流的重定向</span></span><br><span class="line">    print(<span class="string">'hello world'</span>)                   <span class="comment"># 等于sys.stdout.write('hello world')</span></span><br><span class="line">    temp = sys.stdout                      <span class="comment"># 原有流的保存</span></span><br><span class="line">    sys.stdout = open(<span class="string">'log.log'</span>, <span class="string">'a'</span>)      <span class="comment"># 流的重定向</span></span><br><span class="line">    print(<span class="string">'hello world'</span>)                   <span class="comment"># 写入到文件log.log</span></span><br><span class="line">    sys.stdout.close()</span><br><span class="line">    sys.stdout = temp                      <span class="comment"># 原有流的复原</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- Python中and或or总是返回对象(左边的对象或右边的对象) 且具有短路求值的特性</span></span><br><span class="line">    <span class="number">1</span> <span class="keyword">or</span> <span class="number">2</span> <span class="keyword">or</span> <span class="number">3</span>                            <span class="comment"># 返回 1</span></span><br><span class="line">    <span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">3</span>                          <span class="comment"># 返回 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- if/else三元表达符（if语句在行内）</span></span><br><span class="line">    A = <span class="number">1</span> <span class="keyword">if</span> X <span class="keyword">else</span> <span class="number">2</span></span><br><span class="line">    A = <span class="number">1</span> <span class="keyword">if</span> X <span class="keyword">else</span> (<span class="number">2</span> <span class="keyword">if</span> Y <span class="keyword">else</span> <span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 也可以使用and-or语句（一条语句实现多个if-else）</span></span><br><span class="line">    a = <span class="number">6</span></span><br><span class="line">    result = (a &gt; <span class="number">20</span> <span class="keyword">and</span> <span class="string">"big than 20"</span> <span class="keyword">or</span> a &gt; <span class="number">10</span> <span class="keyword">and</span> <span class="string">"big than 10"</span> <span class="keyword">or</span> a &gt; <span class="number">5</span> <span class="keyword">and</span> <span class="string">"big than 5"</span>)    <span class="comment"># 返回"big than 5"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- Python的while语句或者for语句可以带else语句 当然也可以带continue/break/pass语句</span></span><br><span class="line">    <span class="keyword">while</span> a &gt; <span class="number">1</span>:</span><br><span class="line">        anything</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        anything</span><br><span class="line">    <span class="comment"># else语句会在循环结束后执行，除非在循环中执行了break，同样的还有for语句</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        anything</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        anything</span><br><span class="line"></span><br><span class="line"><span class="comment">#-- for循环的元组赋值</span></span><br><span class="line">    <span class="keyword">for</span> (a, b) <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>)]:                   <span class="comment"># 最简单的赋值</span></span><br><span class="line">    <span class="keyword">for</span> ((a, b), c) <span class="keyword">in</span> [((<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>), ((<span class="number">4</span>, <span class="number">5</span>), <span class="number">6</span>)]:    <span class="comment"># 自动解包赋值</span></span><br><span class="line">    <span class="keyword">for</span> ((a, b), c) <span class="keyword">in</span> [((<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>), (<span class="string">"XY"</span>, <span class="number">6</span>)]:      <span class="comment"># 自动解包 a = X, b = Y, c = 6</span></span><br><span class="line">    <span class="keyword">for</span> (a, *b) <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]:            <span class="comment"># 自动解包赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 列表解析语法</span></span><br><span class="line">    M = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">    res = [sum(row) <span class="keyword">for</span> row <span class="keyword">in</span> M]                     <span class="comment"># G = [6, 15, 24] 一般的列表解析 生成一个列表</span></span><br><span class="line">    res = [c * <span class="number">2</span> <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">'spam'</span>]                     <span class="comment"># ['ss', 'pp', 'aa', 'mm']</span></span><br><span class="line">    res = [a * b <span class="keyword">for</span> a <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>] <span class="keyword">for</span> b <span class="keyword">in</span> [<span class="number">4</span>, <span class="number">5</span>]]     <span class="comment"># 多解析过程 返回[4, 5, 8, 10]</span></span><br><span class="line">    res = [a <span class="keyword">for</span> a <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">if</span> a &lt; <span class="number">2</span>]             <span class="comment"># 带判断条件的解析过程</span></span><br><span class="line">    res = [a <span class="keyword">if</span> a &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> a <span class="keyword">in</span> [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]]     <span class="comment"># 带判断条件的高级解析过程</span></span><br><span class="line">    <span class="comment"># 两个列表同时解析：使用zip函数</span></span><br><span class="line">    <span class="keyword">for</span> teama, teamb <span class="keyword">in</span> zip([<span class="string">"Packers"</span>, <span class="string">"49ers"</span>], [<span class="string">"Ravens"</span>, <span class="string">"Patriots"</span>]):</span><br><span class="line">        print(teama + <span class="string">" vs. "</span> + teamb)</span><br><span class="line">    <span class="comment"># 带索引的列表解析：使用enumerate函数</span></span><br><span class="line">    <span class="keyword">for</span> index, team <span class="keyword">in</span> enumerate([<span class="string">"Packers"</span>, <span class="string">"49ers"</span>, <span class="string">"Ravens"</span>, <span class="string">"Patriots"</span>]):</span><br><span class="line">        print(index, team)                            <span class="comment"># 输出0, Packers \n 1, 49ers \n ......</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 生成器表达式</span></span><br><span class="line">    G = (sum(row) <span class="keyword">for</span> row <span class="keyword">in</span> M)                       <span class="comment"># 使用小括号可以创建所需结果的生成器generator object</span></span><br><span class="line">    next(G), next(G), next(G)                         <span class="comment"># 输出(6, 15, 24)</span></span><br><span class="line">    G = &#123;sum(row) <span class="keyword">for</span> row <span class="keyword">in</span> M&#125;                       <span class="comment"># G = &#123;6, 15, 24&#125; 解析语法还可以生成集合和字典</span></span><br><span class="line">    G = &#123;i:sum(M[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)&#125;               <span class="comment"># G = &#123;0: 6, 1: 15, 2: 24&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 文档字符串:出现在Module的开端以及其中函数或类的开端 使用三重引号字符串</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    module document</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        function document</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print()</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Employee</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        class document</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print()</span><br><span class="line">    print(func.__doc__)                <span class="comment"># 输出函数文档字符串</span></span><br><span class="line">    print(Employee.__doc__)            <span class="comment"># 输出类的文档字符串</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 命名惯例:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    以单一下划线开头的变量名(_X)不会被from module import*等语句导入</span></span><br><span class="line"><span class="string">    前后有两个下划线的变量名(__X__)是系统定义的变量名，对解释器有特殊意义</span></span><br><span class="line"><span class="string">    以两个下划线开头但不以下划线结尾的变量名(__X)是类的本地(私有)变量</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 列表解析 in成员关系测试 map sorted zip enumerate内置函数等都使用了迭代协议</span></span><br><span class="line">    <span class="string">'first line'</span> <span class="keyword">in</span> open(<span class="string">'test.txt'</span>)   <span class="comment"># in测试 返回True或False</span></span><br><span class="line">    list(map(str.upper, open(<span class="string">'t'</span>)))    <span class="comment"># map内置函数</span></span><br><span class="line">    sorted(iter([<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>]))      <span class="comment"># sorted内置函数</span></span><br><span class="line">    list(zip([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]))          <span class="comment"># zip内置函数 [(1, 3), (2, 4)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- del语句: 手动删除某个变量</span></span><br><span class="line">    <span class="keyword">del</span> X</span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 获取列表的子表的方法:</span></span><br><span class="line">    x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">    x[:<span class="number">3</span>]                              <span class="comment"># 前3个[1,2,3]</span></span><br><span class="line">    x[<span class="number">1</span>:<span class="number">5</span>]                             <span class="comment"># 中间4个[2,3,4,5]</span></span><br><span class="line">    x[<span class="number">-3</span>:]                             <span class="comment"># 最后3个[4,5,6]</span></span><br><span class="line">    x[::<span class="number">2</span>]                             <span class="comment"># 奇数项[1,3,5]</span></span><br><span class="line">    x[<span class="number">1</span>::<span class="number">2</span>]                            <span class="comment"># 偶数项[2,4,6]</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 手动迭代：iter和next</span></span><br><span class="line">    L = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    I = iter(L)                        <span class="comment"># I为L的迭代器</span></span><br><span class="line">    I.next()                           <span class="comment"># 返回1</span></span><br><span class="line">    I.next()                           <span class="comment"># 返回2</span></span><br><span class="line">    I.next()                           <span class="comment"># Error:StopIteration</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- Python中的可迭代对象</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    1.range迭代器</span></span><br><span class="line"><span class="string">    2.map、zip和filter迭代器</span></span><br><span class="line"><span class="string">    3.字典视图迭代器：D.keys()), D.items()等</span></span><br><span class="line"><span class="string">    4.文件类型</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h2><span id="han-shu-yu-fa-gui-ze">函数语法规则</span><a href="#han-shu-yu-fa-gui-ze" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- 函数相关的语句和表达式</span></span><br><span class="line">    myfunc(<span class="string">'spam'</span>)                     <span class="comment"># 函数调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">()</span>:</span>                      <span class="comment"># 函数定义</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>                        <span class="comment"># 函数返回值</span></span><br><span class="line">    <span class="keyword">global</span> a                           <span class="comment"># 全局变量</span></span><br><span class="line">    <span class="keyword">nonlocal</span> x                         <span class="comment"># 在函数或其他作用域中使用外层（非全局）变量</span></span><br><span class="line">    <span class="keyword">yield</span> x                            <span class="comment"># 生成器函数返回</span></span><br><span class="line">    <span class="keyword">lambda</span>                             <span class="comment"># 匿名函数</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- Python函数变量名解析:LEGB原则，即:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    local(functin) --&gt; encloseing function locals --&gt; global(module) --&gt; build-in(python)</span></span><br><span class="line"><span class="string">    说明:以下边的函数maker为例 则相对于action而言 X为Local N为Encloseing</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 嵌套函数举例:工厂函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maker</span><span class="params">(N)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(X)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> X ** N</span><br><span class="line">        <span class="keyword">return</span> action</span><br><span class="line">    f = maker(<span class="number">2</span>)                       <span class="comment"># pass 2 to N</span></span><br><span class="line">    f(<span class="number">3</span>)                               <span class="comment"># 9, pass 3 to X</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 嵌套函数举例:lambda实例</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maker</span><span class="params">(N)</span>:</span></span><br><span class="line">        action = (<span class="keyword">lambda</span> X: X**N)</span><br><span class="line">        <span class="keyword">return</span> action</span><br><span class="line">    f = maker(<span class="number">2</span>)                       <span class="comment"># pass 2 to N</span></span><br><span class="line">    f(<span class="number">3</span>)                               <span class="comment"># 9, pass 3 to X</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- nonlocal和global语句的区别</span></span><br><span class="line">    <span class="comment"># nonlocal应用于一个嵌套的函数的作用域中的一个名称 例如:</span></span><br><span class="line">    start = <span class="number">100</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tester</span><span class="params">(start)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">nested</span><span class="params">(label)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> start             <span class="comment"># 指定start为tester函数内的local变量 而不是global变量start</span></span><br><span class="line">            print(label, start)</span><br><span class="line">            start += <span class="number">3</span></span><br><span class="line">        <span class="keyword">return</span> nested</span><br><span class="line">    <span class="comment"># global为全局的变量 即def之外的变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tester</span><span class="params">(start)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">nested</span><span class="params">(label)</span>:</span></span><br><span class="line">            <span class="keyword">global</span> start               <span class="comment"># 指定start为global变量start</span></span><br><span class="line">            print(label, start)</span><br><span class="line">            start += <span class="number">3</span></span><br><span class="line">        <span class="keyword">return</span> nested    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 函数参数，不可变参数通过“值”传递，可变参数通过“引用”传递</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, b, c)</span>:</span> print(a, b, c)</span><br><span class="line">    f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)                         <span class="comment"># 参数位置匹配</span></span><br><span class="line">    f(<span class="number">1</span>, c = <span class="number">3</span>, b = <span class="number">2</span>)                 <span class="comment"># 参数关键字匹配</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, b=<span class="number">1</span>, c=<span class="number">2</span>)</span>:</span> print(a, b, c)</span><br><span class="line">    f(<span class="number">1</span>)                               <span class="comment"># 默认参数匹配</span></span><br><span class="line">    f(<span class="number">1</span>, <span class="number">2</span>)                            <span class="comment"># 默认参数匹配</span></span><br><span class="line">    f(a = <span class="number">1</span>, c = <span class="number">3</span>)                    <span class="comment"># 关键字参数和默认参数的混合</span></span><br><span class="line">    <span class="comment"># Keyword-Only参数:出现在*args之后 必须用关键字进行匹配</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keyOnly</span><span class="params">(a, *b, c)</span>:</span> print(<span class="string">''</span>)   <span class="comment"># c就为keyword-only匹配 必须使用关键字c = value匹配</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keyOnly</span><span class="params">(a, *, b, c)</span>:</span> ......    <span class="comment"># b c为keyword-only匹配 必须使用关键字匹配</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keyOnly</span><span class="params">(a, *, b = <span class="number">1</span>)</span>:</span> ......   <span class="comment"># b有默认值 或者省略 或者使用关键字参数b = value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 可变参数匹配: * 和 **</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(*args)</span>:</span> print(args)          <span class="comment"># 在元组中收集不匹配的位置参数</span></span><br><span class="line">    f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)                         <span class="comment"># 输出(1, 2, 3)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(**args)</span>:</span> print(args)         <span class="comment"># 在字典中收集不匹配的关键字参数</span></span><br><span class="line">    f(a = <span class="number">1</span>, b = <span class="number">2</span>)                    <span class="comment"># 输出&#123;'a':1, 'b':2&#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, *b, **c)</span>:</span> print(a, b, c)  <span class="comment"># 两者混合使用</span></span><br><span class="line">    f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, x=<span class="number">4</span>, y=<span class="number">5</span>)               <span class="comment"># 输出1, (2, 3), &#123;'x':4, 'y':5&#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 函数调用时的参数解包: * 和 ** 分别解包元组和字典</span></span><br><span class="line">    func(1, *(2, 3))  &lt;==&gt;  func(1, 2, 3)</span><br><span class="line">    func(1, **&#123;'c':3, 'b':2&#125;)  &lt;==&gt;  func(1, b = 2, c = 3)</span><br><span class="line">    func(1, *(2, 3), **&#123;'c':3, 'b':2&#125;)  &lt;==&gt;  func(1, 2, 3, b = 2, c = 3)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 函数属性:(自己定义的)函数可以添加属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span>.....</span><br><span class="line">    func.count = <span class="number">1</span>                     <span class="comment"># 自定义函数添加属性</span></span><br><span class="line">    <span class="keyword">print</span>.count = <span class="number">1</span>                    <span class="comment"># Error 内置函数不可以添加属性</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 函数注解: 编写在def头部行 主要用于说明参数范围、参数类型、返回值类型等</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a:<span class="string">'spam'</span>, b:<span class="params">(<span class="number">1</span>, <span class="number">10</span>)</span>, c:float)</span> -&gt; int :</span></span><br><span class="line">        print(a, b, c)</span><br><span class="line">    func.__annotations__               <span class="comment"># &#123;'c':&lt;class 'float'&gt;, 'b':(1, 10), 'a':'spam', 'return':&lt;class 'int'&gt;&#125;</span></span><br><span class="line">    <span class="comment"># 编写注解的同时 还是可以使用函数默认值 并且注解的位置位于=号的前边</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a:<span class="string">'spam'</span>=<span class="string">'a'</span>, b:<span class="params">(<span class="number">1</span>, <span class="number">10</span>)</span>=<span class="number">2</span>, c:float=<span class="number">3</span>)</span> -&gt; int :</span></span><br><span class="line">        print(a, b, c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 匿名函数:lambda</span></span><br><span class="line">    f = <span class="keyword">lambda</span> x, y, z : x + y + z     <span class="comment"># 普通匿名函数，使用方法f(1, 2, 3)</span></span><br><span class="line">    f = <span class="keyword">lambda</span> x = <span class="number">1</span>, y = <span class="number">1</span>: x + y     <span class="comment"># 带默认参数的lambda函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(x)</span>:</span>                     <span class="comment"># 嵌套lambda函数</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">lambda</span> y : x + y)</span><br><span class="line">    f = <span class="keyword">lambda</span>: a <span class="keyword">if</span> xxx() <span class="keyword">else</span> b      <span class="comment"># 无参数的lambda函数，使用方法f()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- lambda函数与map filter reduce函数的结合</span></span><br><span class="line">    list(map((<span class="keyword">lambda</span> x: x + <span class="number">1</span>), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))              <span class="comment"># [2, 3, 4]</span></span><br><span class="line">    list(filter((<span class="keyword">lambda</span> x: x &gt; <span class="number">0</span>), range(<span class="number">-4</span>, <span class="number">5</span>)))        <span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line">    functools.reduce((<span class="keyword">lambda</span> x, y: x + y), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])    <span class="comment"># 6</span></span><br><span class="line">    functools.reduce((<span class="keyword">lambda</span> x, y: x * y), [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])    <span class="comment"># 24</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 生成器函数:yield VS return</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gensquare</span><span class="params">(N)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">yield</span> i** <span class="number">2</span>                <span class="comment"># 状态挂起 可以恢复到此时的状态</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> gensquare(<span class="number">5</span>):             <span class="comment"># 使用方法</span></span><br><span class="line">        print(i, end = <span class="string">' '</span>)            <span class="comment"># [0, 1, 4, 9, 16]</span></span><br><span class="line">    x = gensquare(<span class="number">2</span>)                   <span class="comment"># x是一个生成对象</span></span><br><span class="line">    next(x)                            <span class="comment"># 等同于x.__next__() 返回0</span></span><br><span class="line">    next(x)                            <span class="comment"># 等同于x.__next__() 返回1</span></span><br><span class="line">    next(x)                            <span class="comment"># 等同于x.__next__() 抛出异常StopIteration</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 生成器表达式:小括号进行列表解析</span></span><br><span class="line">    G = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>))     <span class="comment"># 使用小括号可以创建所需结果的生成器generator object</span></span><br><span class="line">    next(G), next(G), next(G)          <span class="comment"># 和上述中的生成器函数的返回值一致</span></span><br><span class="line">    <span class="comment">#（1）生成器(生成器函数/生成器表达式)是单个迭代对象</span></span><br><span class="line">    G = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line">    I1 = iter(G)                       <span class="comment"># 这里实际上iter(G) = G</span></span><br><span class="line">    next(I1)                           <span class="comment"># 输出0</span></span><br><span class="line">    next(G)                            <span class="comment"># 输出1</span></span><br><span class="line">    next(I1)                           <span class="comment"># 输出4</span></span><br><span class="line">    <span class="comment">#（2）生成器不保留迭代后的结果</span></span><br><span class="line">    gen = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line">    <span class="number">2</span> <span class="keyword">in</span> gen                           <span class="comment"># 返回True</span></span><br><span class="line">    <span class="number">3</span> <span class="keyword">in</span> gen                           <span class="comment"># 返回True</span></span><br><span class="line">    <span class="number">1</span> <span class="keyword">in</span> gen                           <span class="comment"># 返回False，其实检测2的时候，1已经就不在生成器中了，即1已经被迭代过了，同理2、3也不在了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 本地变量是静态检测的</span></span><br><span class="line">    X = <span class="number">22</span>                             <span class="comment"># 全局变量X的声明和定义</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">        print(X)                       <span class="comment"># 如果没有下一语句 则该句合法 打印全局变量X</span></span><br><span class="line">        X = <span class="number">88</span>                         <span class="comment"># 这一语句使得上一语句非法 因为它使得X变成了本地变量 上一句变成了打印一个未定义的本地变量(局部变量)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="literal">False</span>:                      <span class="comment"># 即使这样的语句 也会把print语句视为非法语句 因为:</span></span><br><span class="line">            X = <span class="number">88</span>                     <span class="comment"># Python会无视if语句而仍然声明了局部变量X</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span>                        <span class="comment"># 改进</span></span><br><span class="line">        <span class="keyword">global</span> X                       <span class="comment"># 声明变量X为全局变量</span></span><br><span class="line">        print(X)                       <span class="comment"># 打印全局变量X</span></span><br><span class="line">        X = <span class="number">88</span>                         <span class="comment"># 改变全局变量X</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#-- 函数的默认值是在函数定义的时候实例化的 而不是在调用的时候 例子:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(numbers=[])</span>:</span>               <span class="comment"># 这里的[]是可变的</span></span><br><span class="line">        numbers.append(<span class="number">9</span>)    </span><br><span class="line">        print(numbers)</span><br><span class="line">    foo()                              <span class="comment"># first time, like before, [9]</span></span><br><span class="line">    foo()                              <span class="comment"># second time, not like before, [9, 9]</span></span><br><span class="line">    foo()                              <span class="comment"># third time, not like before too, [9, 9, 9]</span></span><br><span class="line">    <span class="comment"># 改进:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(numbers=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> numbers <span class="keyword">is</span> <span class="literal">None</span>: numbers = []</span><br><span class="line">        numbers.append(<span class="number">9</span>)</span><br><span class="line">        print(numbers)</span><br><span class="line">    <span class="comment"># 另外一个例子 参数的默认值为不可变的:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(count=<span class="number">0</span>)</span>:</span>                  <span class="comment"># 这里的0是数字, 是不可变的</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        print(count)</span><br><span class="line">    foo()                              <span class="comment"># 输出1</span></span><br><span class="line">    foo()                              <span class="comment"># 还是输出1</span></span><br><span class="line">    foo(<span class="number">3</span>)                             <span class="comment"># 输出4</span></span><br><span class="line">    foo()                              <span class="comment"># 还是输出1</span></span><br></pre></td></tr></table></figure>

<h2><span id="han-shu-li-zi">函数例子</span><a href="#han-shu-li-zi" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""数学运算类"""</span></span><br><span class="line">    abs(x)                              <span class="comment"># 求绝对值，参数可以是整型，也可以是复数，若参数是复数，则返回复数的模</span></span><br><span class="line">    complex([real[, imag]])             <span class="comment"># 创建一个复数</span></span><br><span class="line">    divmod(a, b)                        <span class="comment"># 分别取商和余数，注意：整型、浮点型都可以</span></span><br><span class="line">    float([x])                          <span class="comment"># 将一个字符串或数转换为浮点数。如果无参数将返回0.0</span></span><br><span class="line">    int([x[, base]])                    <span class="comment"># 将一个字符串或浮点数转换为int类型，base表示进制</span></span><br><span class="line">    long([x[, base]])                   <span class="comment"># 将一个字符串或浮点数转换为long类型</span></span><br><span class="line">    pow(x, y)                           <span class="comment"># 返回x的y次幂</span></span><br><span class="line">    range([start], stop[, step])        <span class="comment"># 产生一个序列，默认从0开始</span></span><br><span class="line">    round(x[, n])                       <span class="comment"># 四舍五入</span></span><br><span class="line">    sum(iterable[, start])              <span class="comment"># 对集合求和</span></span><br><span class="line">    oct(x)                              <span class="comment"># 将一个数字转化为8进制字符串</span></span><br><span class="line">    hex(x)                              <span class="comment"># 将一个数字转换为16进制字符串</span></span><br><span class="line">    chr(i)                              <span class="comment"># 返回给定int类型对应的ASCII字符</span></span><br><span class="line">    unichr(i)                           <span class="comment"># 返回给定int类型的unicode</span></span><br><span class="line">    ord(c)                              <span class="comment"># 返回ASCII字符对应的整数</span></span><br><span class="line">    bin(x)                              <span class="comment"># 将整数x转换为二进制字符串</span></span><br><span class="line">    bool([x])                           <span class="comment"># 将x转换为Boolean类型</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">"""集合类操作"""</span></span><br><span class="line">    basestring()                        <span class="comment"># str和unicode的超类，不能直接调用，可以用作isinstance判断</span></span><br><span class="line">    format(value [, format_spec])       <span class="comment"># 格式化输出字符串，格式化的参数顺序从0开始，如“I am &#123;0&#125;,I like &#123;1&#125;”</span></span><br><span class="line">    enumerate(sequence[, start=<span class="number">0</span>])      <span class="comment"># 返回一个可枚举的对象，注意它有第二个参数</span></span><br><span class="line">    iter(obj[, sentinel])               <span class="comment"># 生成一个对象的迭代器，第二个参数表示分隔符</span></span><br><span class="line">    max(iterable[, args...][key])       <span class="comment"># 返回集合中的最大值</span></span><br><span class="line">    min(iterable[, args...][key])       <span class="comment"># 返回集合中的最小值</span></span><br><span class="line">    dict([arg])                         <span class="comment"># 创建数据字典</span></span><br><span class="line">    list([iterable])                    <span class="comment"># 将一个集合类转换为另外一个集合类</span></span><br><span class="line">    set()                               <span class="comment"># set对象实例化</span></span><br><span class="line">    frozenset([iterable])               <span class="comment"># 产生一个不可变的set</span></span><br><span class="line">    tuple([iterable])                   <span class="comment"># 生成一个tuple类型</span></span><br><span class="line">    str([object])                       <span class="comment"># 转换为string类型</span></span><br><span class="line">    sorted(iterable[, cmp[, key[, reverse]]])             <span class="comment"># 集合排序</span></span><br><span class="line">        L = [(<span class="string">'b'</span>,<span class="number">2</span>),(<span class="string">'a'</span>,<span class="number">1</span>),(<span class="string">'c'</span>,<span class="number">3</span>),(<span class="string">'d'</span>,<span class="number">4</span>)]</span><br><span class="line">        sorted(L, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)       <span class="comment"># 使用Key参数和reverse参数</span></span><br><span class="line">        sorted(L, key=<span class="keyword">lambda</span> x: (x[<span class="number">0</span>], x[<span class="number">1</span>]))             <span class="comment"># 使用key参数进行多条件排序，即如果x[0]相同，则比较x[1]</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""逻辑判断"""</span></span><br><span class="line">    all(iterable)                       <span class="comment"># 集合中的元素都为真的时候为真，特别的，若为空串返回为True</span></span><br><span class="line">    any(iterable)                       <span class="comment"># 集合中的元素有一个为真的时候为真，特别的，若为空串返回为False</span></span><br><span class="line">    cmp(x, y)                           <span class="comment"># 如果x &lt; y ,返回负数；x == y, 返回0；x &gt; y,返回正数</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""IO操作"""</span></span><br><span class="line">    file(filename [, mode [, bufsize]]) <span class="comment"># file类型的构造函数。</span></span><br><span class="line">    input([prompt])                     <span class="comment"># 获取用户输入，推荐使用raw_input，因为该函数将不会捕获用户的错误输入，意思是自行判断类型</span></span><br><span class="line">    <span class="comment"># 在 Built-in Functions 里有一句话是这样写的：Consider using the raw_input() function for general input from users.</span></span><br><span class="line">    raw_input([prompt])                 <span class="comment"># 设置输入，输入都是作为字符串处理</span></span><br><span class="line">    open(name[, mode[, buffering]])     <span class="comment"># 打开文件，与file有什么不同？推荐使用open</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">"""其他"""</span></span><br><span class="line">    callable(object)                    <span class="comment"># 检查对象object是否可调用</span></span><br><span class="line">    classmethod(func)                   <span class="comment"># 用来说明这个func是个类方法</span></span><br><span class="line">    staticmethod(func)                  <span class="comment"># 用来说明这个func为静态方法</span></span><br><span class="line">    dir([object])                       <span class="comment"># 不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。</span></span><br><span class="line">    help(obj)                           <span class="comment"># 返回obj的帮助信息</span></span><br><span class="line">    eval(expression)                    <span class="comment"># 计算表达式expression的值，并返回</span></span><br><span class="line">    exec(str)                           <span class="comment"># 将str作为Python语句执行</span></span><br><span class="line">    execfile(filename)                  <span class="comment"># 用法类似exec()，不同的是execfile的参数filename为文件名，而exec的参数为字符串。</span></span><br><span class="line">    filter(function, iterable)          <span class="comment"># 构造一个序列，等价于[item for item in iterable if function(item)]，function返回值为True或False的函数</span></span><br><span class="line">        list(filter(bool, range(<span class="number">-3</span>, <span class="number">4</span>)))<span class="comment"># 返回[-3, -2, -1, 1, 2, 3], 没有0</span></span><br><span class="line">    hasattr(object, name)               <span class="comment"># 判断对象object是否包含名为name的特性</span></span><br><span class="line">    getattr(object, name [, defalut])   <span class="comment"># 获取一个类的属性</span></span><br><span class="line">    setattr(object, name, value)        <span class="comment"># 设置属性值</span></span><br><span class="line">    delattr(object, name)               <span class="comment"># 删除object对象名为name的属性</span></span><br><span class="line">    globals()                           <span class="comment"># 返回一个描述当前全局符号表的字典</span></span><br><span class="line">    hash(object)                        <span class="comment"># 如果对象object为哈希表类型，返回对象object的哈希值</span></span><br><span class="line">    id(object)                          <span class="comment"># 返回对象的唯一标识，一串数字</span></span><br><span class="line">    isinstance(object, classinfo)       <span class="comment"># 判断object是否是class的实例</span></span><br><span class="line">        isinstance(<span class="number">1</span>, int)              <span class="comment"># 判断是不是int类型</span></span><br><span class="line">        isinstance(<span class="number">1</span>, (int, float))     <span class="comment"># isinstance的第二个参数接受一个元组类型</span></span><br><span class="line">    issubclass(class, classinfo)        # 判断class是否为classinfo的子类</span><br><span class="line">    locals()                            <span class="comment"># 返回当前的变量列表</span></span><br><span class="line">    map(function, iterable, ...)        <span class="comment"># 遍历每个元素，执行function操作</span></span><br><span class="line">        list(map(abs, range(<span class="number">-3</span>, <span class="number">4</span>)))    <span class="comment"># 返回[3, 2, 1, 0, 1, 2, 3]</span></span><br><span class="line">    next(iterator[, default])           <span class="comment"># 类似于iterator.next()</span></span><br><span class="line">    property([fget[, fset[, fdel[, doc]]]])           <span class="comment"># 属性访问的包装类，设置后可以通过c.x=value等来访问setter和getter</span></span><br><span class="line">    reduce(function, iterable[, initializer])         <span class="comment"># 合并操作，从第一个开始是前两个参数，然后是前两个的结果与第三个合并进行处理，以此类推</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span><span class="keyword">return</span> x + y </span><br><span class="line">        reduce(add, range(<span class="number">1</span>, <span class="number">11</span>))                     <span class="comment"># 返回55 (注:1+2+3+4+5+6+7+8+9+10 = 55)</span></span><br><span class="line">        reduce(add, range(<span class="number">1</span>, <span class="number">11</span>), <span class="number">20</span>)                 <span class="comment"># 返回75</span></span><br><span class="line">    reload(module)                      <span class="comment"># 重新加载模块</span></span><br><span class="line">    repr(object)                        <span class="comment"># 将一个对象变幻为可打印的格式</span></span><br><span class="line">    slice(start, stop[, step])          <span class="comment"># 产生分片对象</span></span><br><span class="line">    type(object)                        <span class="comment"># 返回该object的类型</span></span><br><span class="line">    vars([object])                      <span class="comment"># 返回对象的变量名、变量值的字典</span></span><br><span class="line">        a = Class();                    <span class="comment"># Class为一个空类</span></span><br><span class="line">        a.name = <span class="string">'qi'</span>, a.age = <span class="number">9</span></span><br><span class="line">        vars(a)                         <span class="comment"># &#123;'name':'qi', 'age':9&#125;</span></span><br><span class="line">    zip([iterable, ...])                <span class="comment"># 返回对应数组</span></span><br><span class="line">        list(zip([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])) <span class="comment"># [(1, 4), (2, 5), (3, 6)]</span></span><br><span class="line">        a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],  b = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line">        z = zip(a, b)                   <span class="comment"># 压缩：[(1, "a"), (2, "b"), (3, "c")]</span></span><br><span class="line">        zip(*z)                         <span class="comment"># 解压缩：[(1, 2, 3), ("a", "b", "c")]</span></span><br><span class="line">    unicode(string, encoding, errors)   <span class="comment"># 将字符串string转化为unicode形式，string为encoded string。</span></span><br></pre></td></tr></table></figure>

<h2><span id="mo-kuai-model">模块model</span><a href="#mo-kuai-model" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- Python模块搜索路径:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    (1)程序的主目录    (2)PYTHONPATH目录 (3)标准链接库目录 (4)任何.pth文件的内容</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 查看全部的模块搜索路径</span></span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    sys.path</span><br><span class="line">    sys.argv                            <span class="comment"># 获得脚本的参数</span></span><br><span class="line">    sys.builtin_module_names            <span class="comment"># 查找内建模块</span></span><br><span class="line">    sys.platform                        <span class="comment"># 返回当前平台 出现如： "win32" "linux" "darwin"等</span></span><br><span class="line">    sys.modules                         <span class="comment"># 查找已导入的模块</span></span><br><span class="line">    sys.modules.keys()</span><br><span class="line">    sys.stdout                          <span class="comment"># stdout 和 stderr 都是类文件对象，但是它们都是只写的。它们都没有 read 方法，只有 write 方法</span></span><br><span class="line">    sys.stdout.write(<span class="string">"hello"</span>)</span><br><span class="line">    sys.stderr</span><br><span class="line">    sys.stdin   </span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 模块的使用代码</span></span><br><span class="line">    <span class="keyword">import</span> module1, module2             <span class="comment"># 导入module1 使用module1.printer()</span></span><br><span class="line">    <span class="keyword">from</span> module1 <span class="keyword">import</span> printer         <span class="comment"># 导入module1中的printer变量 使用printer()</span></span><br><span class="line">    <span class="keyword">from</span> module1 <span class="keyword">import</span> *               <span class="comment"># 导入module1中的全部变量 使用不必添加module1前缀</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 重载模块reload: 这是一个内置函数 而不是一条语句</span></span><br><span class="line">    <span class="keyword">from</span> imp <span class="keyword">import</span> reload</span><br><span class="line">    reload(module)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 模块的包导入:使用点号(.)而不是路径(dir1\dir2)进行导入</span></span><br><span class="line">    <span class="keyword">import</span> dir1.dir2.mod                <span class="comment"># d导入包(目录)dir1中的包dir2中的mod模块 此时dir1必须在Python可搜索路径中</span></span><br><span class="line">    <span class="keyword">from</span> dir1.dir2.mod <span class="keyword">import</span> *         <span class="comment"># from语法的包导入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- __init__.py包文件:每个导入的包中都应该包含这么一个文件</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    该文件可以为空</span></span><br><span class="line"><span class="string">    首次进行包导入时 该文件会自动执行</span></span><br><span class="line"><span class="string">    高级功能:在该文件中使用__all__列表来定义包(目录)以from*的形式导入时 需要导入什么</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 包相对导入:使用点号(.) 只能使用from语句</span></span><br><span class="line">    <span class="keyword">from</span> . <span class="keyword">import</span> spam                  <span class="comment"># 导入当前目录下的spam模块（Python2: 当前目录下的模块, 直接导入即可）</span></span><br><span class="line">    <span class="keyword">from</span> .spam <span class="keyword">import</span> name              <span class="comment"># 导入当前目录下的spam模块的name属性（Python2: 当前目录下的模块, 直接导入即可，不用加.）</span></span><br><span class="line">    <span class="keyword">from</span> .. <span class="keyword">import</span> spam                 <span class="comment"># 导入当前目录的父目录下的spam模块</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 包相对导入与普通导入的区别</span></span><br><span class="line">    <span class="keyword">from</span> string <span class="keyword">import</span> *                <span class="comment"># 这里导入的string模块为sys.path路径上的 而不是本目录下的string模块(如果存在也不是)</span></span><br><span class="line">    <span class="keyword">from</span> .string <span class="keyword">import</span> *               <span class="comment"># 这里导入的string模块为本目录下的(不存在则导入失败) 而不是sys.path路径上的</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 模块数据隐藏:最小化from*的破坏</span></span><br><span class="line">    _X                                  <span class="comment"># 变量名前加下划线可以防止from*导入时该变量名被复制出去</span></span><br><span class="line">    __all__ = [<span class="string">'x'</span>, <span class="string">'x1'</span>, <span class="string">'x2'</span>]         <span class="comment"># 使用__all__列表指定from*时复制出去的变量名(变量名在列表中为字符串形式)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 可以使用__name__进行模块的单元测试:当模块为顶层执行文件时值为'__main__' 当模块被导入时为模块名</span></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">        doSomething</span><br><span class="line">    <span class="comment"># 模块属性中还有其他属性，例如：</span></span><br><span class="line">    __doc__                             <span class="comment"># 模块的说明文档</span></span><br><span class="line">    __file__                            <span class="comment"># 模块文件的文件名，包括全路径</span></span><br><span class="line">    __name__                            <span class="comment"># 主文件或者被导入文件</span></span><br><span class="line">    __package__                         <span class="comment"># 模块所在的包</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#-- import语句from语句的as扩展</span></span><br><span class="line">    <span class="keyword">import</span> modulename <span class="keyword">as</span> name</span><br><span class="line">    <span class="keyword">from</span> modulename <span class="keyword">import</span> attrname <span class="keyword">as</span> name</span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 得到模块属性的几种方法 假设为了得到name属性的值</span></span><br><span class="line">    M.name</span><br><span class="line">    M.__dict__[<span class="string">'name'</span>]</span><br><span class="line">    sys.modules[<span class="string">'M'</span>].name</span><br><span class="line">    getattr(M, <span class="string">'name'</span>)</span><br></pre></td></tr></table></figure>

<h2><span id="lei-yu-mian-dui-dui-xiang">类与面对对象</span><a href="#lei-yu-mian-dui-dui-xiang" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- 最普通的类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C1</span><span class="params">(C2, C3)</span>:</span></span><br><span class="line">        spam = <span class="number">42</span>                       <span class="comment"># 数据属性</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span>       <span class="comment"># 函数属性:构造函数</span></span><br><span class="line">            self.name = name</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span>              <span class="comment"># 函数属性:析构函数</span></span><br><span class="line">            print(<span class="string">"goodbey "</span>, self.name)    </span><br><span class="line">    I1 = C1(<span class="string">'bob'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- Python的类没有基于参数的函数重载</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FirstClass</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self, string)</span>:</span></span><br><span class="line">            print(string)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span>                 <span class="comment"># 此时类中只有一个test函数 即后者test(self) 它覆盖掉前者带参数的test函数</span></span><br><span class="line">            print(<span class="string">"hello world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 子类扩展超类: 尽量调用超类的方法</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Manager</span><span class="params">(Person)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">giveRaise</span><span class="params">(self, percent, bonus = <span class="number">.10</span>)</span>:</span></span><br><span class="line">            self.pay = int(self.pay*(<span class="number">1</span> + percent + bonus))     <span class="comment"># 不好的方式 复制粘贴超类代码</span></span><br><span class="line">            Person.giveRaise(self, percent + bonus)            <span class="comment"># 好的方式 尽量调用超类方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 类内省工具</span></span><br><span class="line">    bob = Person(<span class="string">'bob'</span>)</span><br><span class="line">    bob.__class__                       <span class="comment"># &lt;class 'Person'&gt;</span></span><br><span class="line">    bob.__class__.__name__              <span class="comment"># 'Person'</span></span><br><span class="line">    bob.__dict__                        <span class="comment"># &#123;'pay':0, 'name':'bob', 'job':'Manager'&#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 返回1中 数据属性spam是属于类 而不是对象</span></span><br><span class="line">    I1 = C1(<span class="string">'bob'</span>); I2 = C2(<span class="string">'tom'</span>)      <span class="comment"># 此时I1和I2的spam都为42 但是都是返回的C1的spam属性</span></span><br><span class="line">    C1.spam = <span class="number">24</span>                        <span class="comment"># 此时I1和I2的spam都为24</span></span><br><span class="line">    I1.spam = <span class="number">3</span>                         <span class="comment"># 此时I1新增自有属性spam 值为3 I2和C1的spam还都为24</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 类方法调用的两种方式</span></span><br><span class="line">    instance.method(arg...)</span><br><span class="line">    <span class="class"><span class="keyword">class</span>.<span class="title">method</span><span class="params">(instance, arg...)</span></span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">#-- 抽象超类的实现方法</span></span><br><span class="line"><span class="class">    # <span class="params">(<span class="number">1</span>)</span>某个函数中调用未定义的函数 子类中定义该函数</span></span><br><span class="line"><span class="class">        <span class="title">def</span> <span class="title">delegate</span><span class="params">(self)</span>:</span></span><br><span class="line">            self.action()               <span class="comment"># 本类中不定义action函数 所以使用delegate函数时就会出错</span></span><br><span class="line">    <span class="comment"># (2)定义action函数 但是返回异常</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">raise</span> NotImplementedError(<span class="string">"action must be defined"</span>)</span><br><span class="line">    <span class="comment"># (3)上述的两种方法还都可以定义实例对象 实际上可以利用@装饰器语法生成不能定义的抽象超类</span></span><br><span class="line">        <span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Super</span><span class="params">(metaclass = ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">            @abstractmethod</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(self)</span>:</span> <span class="keyword">pass</span></span><br><span class="line">        x = Super()                     <span class="comment"># 返回 TypeError: Can't instantiate abstract class Super with abstract methods action</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- # OOP和继承: "is-a"的关系</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(B)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    a = A()</span><br><span class="line">    isinstance(a, B)                    <span class="comment"># 返回True, A是B的子类 a也是B的一种</span></span><br><span class="line">    <span class="comment"># OOP和组合: "has-a"的关系</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># OOP和委托: "包装"对象 在Python中委托通常是以"__getattr__"钩子方法实现的, 这个方法会拦截对不存在属性的读取</span></span><br><span class="line">    <span class="comment"># 包装类(或者称为代理类)可以使用__getattr__把任意读取转发给被包装的对象</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">wrapper</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, object)</span>:</span></span><br><span class="line">            self.wrapped = object</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__getattr</span><span class="params">(self, attrname)</span>:</span></span><br><span class="line">            print(<span class="string">'Trace: '</span>, attrname)</span><br><span class="line">            <span class="keyword">return</span> getattr(self.wrapped, attrname)</span><br><span class="line">    <span class="comment"># 注:这里使用getattr(X, N)内置函数以变量名字符串N从包装对象X中取出属性 类似于X.__dict__[N]</span></span><br><span class="line">    x = wrapper([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">    x.append(<span class="number">4</span>)                         <span class="comment"># 返回 "Trace: append" [1, 2, 3, 4]</span></span><br><span class="line">    x = wrapper(&#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;)</span><br><span class="line">    list(x.keys())                      <span class="comment"># 返回 "Trace: keys" ['a', 'b']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 类的伪私有属性:使用__attr</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C1</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">            self.__name = name          <span class="comment"># 此时类的__name属性为伪私有属性 原理 它会自动变成self._C1__name = name</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'self.name = %s'</span> % self.__name</span><br><span class="line">    I = C1(<span class="string">'tom'</span>)</span><br><span class="line">    print(I)                            <span class="comment"># 返回 self.name = tom</span></span><br><span class="line">    I.__name = <span class="string">'jeey'</span>                   <span class="comment"># 这里无法访问 __name为伪私有属性</span></span><br><span class="line">    I._C1__name = <span class="string">'jeey'</span>                <span class="comment"># 这里可以修改成功 self.name = jeey</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 类方法是对象:无绑定类方法对象 / 绑定实例方法对象</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">doit</span><span class="params">(self, message)</span>:</span></span><br><span class="line">            print(message)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">selfless</span><span class="params">(message)</span></span></span><br><span class="line"><span class="function">            <span class="title">print</span><span class="params">(message)</span></span></span><br><span class="line">    obj = Spam()</span><br><span class="line">    x = obj.doit                        <span class="comment"># 类的绑定方法对象 实例 + 函数</span></span><br><span class="line">    x(<span class="string">'hello world'</span>)</span><br><span class="line">    x = Spam.doit                       <span class="comment"># 类的无绑定方法对象 类名 + 函数</span></span><br><span class="line">    x(obj, <span class="string">'hello world'</span>)</span><br><span class="line">    x = Spam.selfless                   <span class="comment"># 类的无绑定方法函数 在3.0之前无效</span></span><br><span class="line">    x(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 获取对象信息: 属性和方法</span></span><br><span class="line">    a = MyObject()</span><br><span class="line">    dir(a)                              <span class="comment"># 使用dir函数</span></span><br><span class="line">    hasattr(a, <span class="string">'x'</span>)                     <span class="comment"># 测试是否有x属性或方法 即a.x是否已经存在</span></span><br><span class="line">    setattr(a, <span class="string">'y'</span>, <span class="number">19</span>)                 <span class="comment"># 设置属性或方法 等同于a.y = 19</span></span><br><span class="line">    getattr(a, <span class="string">'z'</span>, <span class="number">0</span>)                  <span class="comment"># 获取属性或方法 如果属性不存在 则返回默认值0</span></span><br><span class="line">    <span class="comment">#这里有个小技巧，setattr可以设置一个不能访问到的属性，即只能用getattr获取</span></span><br><span class="line">    setattr(a, <span class="string">"can't touch"</span>, <span class="number">100</span>)      <span class="comment"># 这里的属性名带有空格，不能直接访问</span></span><br><span class="line">    getattr(a, <span class="string">"can't touch"</span>, <span class="number">0</span>)        <span class="comment"># 但是可以用getattr获取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 为类动态绑定属性或方法: MethodType方法</span></span><br><span class="line">    <span class="comment"># 一般创建了一个class的实例后, 可以给该实例绑定任何属性和方法, 这就是动态语言的灵活性</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    s = Student()</span><br><span class="line">    s.name = <span class="string">'Michael'</span>                  <span class="comment"># 动态给实例绑定一个属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">(self, age)</span>:</span>             <span class="comment"># 定义一个函数作为实例方法</span></span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line">    s.set_age = MethodType(set_age, s)  <span class="comment"># 给实例绑定一个方法 类的其他实例不受此影响</span></span><br><span class="line">    s.set_age(<span class="number">25</span>)                       <span class="comment"># 调用实例方法</span></span><br><span class="line">    Student.set_age = MethodType(set_age, Student)    <span class="comment"># 为类绑定一个方法 类的所有实例都拥有该方法</span></span><br></pre></td></tr></table></figure>

<h2><span id="lei-de-gao-ji-hua-ti">类的高级话题</span><a href="#lei-de-gao-ji-hua-ti" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- 多重继承: "混合类", 搜索方式"从下到上 从左到右 广度优先"</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(B, C)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 类的继承和子类的初始化</span></span><br><span class="line">    <span class="comment"># 1.子类定义了__init__方法时，若未显示调用基类__init__方法，python不会帮你调用。</span></span><br><span class="line">    <span class="comment"># 2.子类未定义__init__方法时，python会自动帮你调用首个基类的__init__方法，注意是首个。</span></span><br><span class="line">    <span class="comment"># 3.子类显示调用基类的初始化函数：</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FooParent</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></span><br><span class="line">            self.parent = <span class="string">'I\'m the Parent.'</span></span><br><span class="line">            print(<span class="string">'Parent:a='</span> + str(a))</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self, message)</span>:</span></span><br><span class="line">            print(message + <span class="string">' from Parent'</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FooChild</span><span class="params">(FooParent)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></span><br><span class="line">            FooParent.__init__(self, a)</span><br><span class="line">            print(<span class="string">'Child:a='</span> + str(a))</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self, message)</span>:</span></span><br><span class="line">            FooParent.bar(self, message)</span><br><span class="line">            print(message + <span class="string">' from Child'</span>)</span><br><span class="line">    fooChild = FooChild(<span class="number">10</span>)</span><br><span class="line">    fooChild.bar(<span class="string">'HelloWorld'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- #实例方法 / 静态方法 / 类方法</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Methods</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">imeth</span><span class="params">(self, x)</span>:</span> print(self, x)      <span class="comment"># 实例方法：传入的是实例和数据，操作的是实例的属性</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">smeth</span><span class="params">(x)</span>:</span> print(x)                  <span class="comment"># 静态方法：只传入数据 不传入实例，操作的是类的属性而不是实例的属性</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">cmeth</span><span class="params">(cls, x)</span>:</span> print(cls, x)        <span class="comment"># 类方法：传入的是类对象和数据</span></span><br><span class="line">        smeth = staticmethod(smeth)             <span class="comment"># 调用内置函数，也可以使用@staticmethod</span></span><br><span class="line">        cmeth = classmethod(cmeth)              <span class="comment"># 调用内置函数，也可以使用@classmethod</span></span><br><span class="line">    obj = Methods()</span><br><span class="line">    obj.imeth(<span class="number">1</span>)                                <span class="comment"># 实例方法调用 &lt;__main__.Methods object...&gt; 1</span></span><br><span class="line">    Methods.imeth(obj, <span class="number">2</span>)                       <span class="comment"># &lt;__main__.Methods object...&gt; 2</span></span><br><span class="line">    Methods.smeth(<span class="number">3</span>)                            <span class="comment"># 静态方法调用 3</span></span><br><span class="line">    obj.smeth(<span class="number">4</span>)                                <span class="comment"># 这里可以使用实例进行调用</span></span><br><span class="line">    Methods.cmeth(<span class="number">5</span>)                            <span class="comment"># 类方法调用 &lt;class '__main__.Methods'&gt; 5</span></span><br><span class="line">    obj.cmeth(<span class="number">6</span>)                                <span class="comment"># &lt;class '__main__.Methods'&gt; 6</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 函数装饰器:是它后边的函数的运行时的声明 由@符号以及后边紧跟的"元函数"(metafunction)组成</span></span><br><span class="line"><span class="meta">        @staticmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">smeth</span><span class="params">(x)</span>:</span> print(x)</span><br><span class="line">    <span class="comment"># 等同于:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">smeth</span><span class="params">(x)</span>:</span> print(x)</span><br><span class="line">        smeth = staticmethod(smeth)</span><br><span class="line">    <span class="comment"># 同理</span></span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">cmeth</span><span class="params">(cls, x)</span>:</span> print(x)</span><br><span class="line">    <span class="comment"># 等同于</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">cmeth</span><span class="params">(cls, x)</span>:</span> print(x)</span><br><span class="line">        cmeth = classmethod(cmeth)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 类修饰器:是它后边的类的运行时的声明 由@符号以及后边紧跟的"元函数"(metafunction)组成</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(aClass)</span>:</span>.....</span><br><span class="line"><span class="meta">        @decorator</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span>....</span><br><span class="line">    <span class="comment"># 等同于:</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span>....</span><br><span class="line">        C = decorator(C)</span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 限制class属性: __slots__属性</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">        __slots__ = (<span class="string">'name'</span>, <span class="string">'age'</span>)             <span class="comment"># 限制Student及其实例只能拥有name和age属性</span></span><br><span class="line">    <span class="comment"># __slots__属性只对当前类起作用, 对其子类不起作用</span></span><br><span class="line">    <span class="comment"># __slots__属性能够节省内存</span></span><br><span class="line">    <span class="comment"># __slots__属性可以为列表list，或者元组tuple</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 类属性高级话题: @property</span></span><br><span class="line">    <span class="comment"># 假设定义了一个类:C，该类必须继承自object类，有一私有变量_x</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">            self.__x = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 第一种使用属性的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">getx</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.__x</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">setx</span><span class="params">(self, value)</span>:</span></span><br><span class="line">            self.__x = value</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">delx</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">del</span> self.__x</span><br><span class="line">        x = property(getx, setx, delx, <span class="string">''</span>)</span><br><span class="line">    <span class="comment"># property函数原型为property(fget=None,fset=None,fdel=None,doc=None)</span></span><br><span class="line">    <span class="comment"># 使用</span></span><br><span class="line">    c = C()</span><br><span class="line">    c.x = <span class="number">100</span>                         <span class="comment"># 自动调用setx方法</span></span><br><span class="line">    y = c.x                           <span class="comment"># 自动调用getx方法</span></span><br><span class="line">    <span class="keyword">del</span> c.x                           <span class="comment"># 自动调用delx方法</span></span><br><span class="line">    <span class="comment"># 第二种方法使用属性的方法</span></span><br><span class="line"><span class="meta">        @property</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.__x</span><br><span class="line"><span class="meta">        @x.setter</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self, value)</span>:</span></span><br><span class="line">           self.__x = value</span><br><span class="line"><span class="meta">        @x.deleter</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span></span><br><span class="line">           <span class="keyword">del</span> self.__x</span><br><span class="line">    <span class="comment"># 使用</span></span><br><span class="line">    c = C()</span><br><span class="line">    c.x = <span class="number">100</span>                         <span class="comment"># 自动调用setter方法</span></span><br><span class="line">    y = c.x                           <span class="comment"># 自动调用x方法</span></span><br><span class="line">    <span class="keyword">del</span> c.x                           <span class="comment"># 自动调用deleter方法</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 定制类: 重写类的方法</span></span><br><span class="line">    <span class="comment"># (1)__str__方法、__repr__方法: 定制类的输出字符串</span></span><br><span class="line">    <span class="comment"># (2)__iter__方法、next方法: 定制类的可迭代性</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">            self.a, self.b = <span class="number">0</span>, <span class="number">1</span>     <span class="comment"># 初始化两个计数器a，b</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self               <span class="comment"># 实例本身就是迭代对象，故返回自己</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">            self.a, self.b = self.b, self.a + self.b</span><br><span class="line">            <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>:       <span class="comment"># 退出循环的条件</span></span><br><span class="line">                <span class="keyword">raise</span> StopIteration()</span><br><span class="line">            <span class="keyword">return</span> self.a             <span class="comment"># 返回下一个值</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> Fib():</span><br><span class="line">        print(n)                      <span class="comment"># 使用</span></span><br><span class="line">    <span class="comment"># (3)__getitem__方法、__setitem__方法: 定制类的下标操作[] 或者切片操作slice</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Indexer</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">            self.data = &#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, n)</span>:</span>             <span class="comment"># 定义getitem方法</span></span><br><span class="line">            print(<span class="string">'getitem:'</span>, n)                </span><br><span class="line">            <span class="keyword">return</span> self.data[n]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span>    <span class="comment"># 定义setitem方法</span></span><br><span class="line">            print(<span class="string">'setitem:key = &#123;0&#125;, value = &#123;1&#125;'</span>.format(key, value))</span><br><span class="line">            self.data[key] = value</span><br><span class="line">    test = Indexer()</span><br><span class="line">    test[<span class="number">0</span>] = <span class="number">1</span>;   test[<span class="number">3</span>] = <span class="string">'3'</span>              <span class="comment"># 调用setitem方法</span></span><br><span class="line">    print(test[<span class="number">0</span>])                            <span class="comment"># 调用getitem方法</span></span><br><span class="line">    <span class="comment"># (4)__getattr__方法: 定制类的属性操作</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span>          <span class="comment"># 定义当获取类的属性时的返回值</span></span><br><span class="line">            <span class="keyword">if</span> attr==<span class="string">'age'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">25</span>                     <span class="comment"># 当获取age属性时返回25</span></span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">'object has no attribute: %s'</span> % attr)</span><br><span class="line">        <span class="comment"># 注意: 只有当属性不存在时 才会调用该方法 且该方法默认返回None 需要在函数最后引发异常</span></span><br><span class="line">    s = Student()</span><br><span class="line">    s.age                                     <span class="comment"># s中age属性不存在 故调用__getattr__方法 返回25</span></span><br><span class="line">    <span class="comment"># (5)__call__方法: 定制类的'可调用'性</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span>                   <span class="comment"># 也可以带参数</span></span><br><span class="line">            print(<span class="string">'Calling......'</span>)</span><br><span class="line">    s = Student()</span><br><span class="line">    s()                                       <span class="comment"># s变成了可调用的 也可以带参数</span></span><br><span class="line">    callable(s)                               <span class="comment"># 测试s的可调用性 返回True</span></span><br><span class="line">    <span class="comment">#    (6)__len__方法：求类的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.data)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 动态创建类type()</span></span><br><span class="line">    <span class="comment"># 一般创建类 需要在代码中提前定义</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(object)</span>:</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self, name=<span class="string">'world'</span>)</span>:</span></span><br><span class="line">                print(<span class="string">'Hello, %s.'</span> % name)</span><br><span class="line">        h = Hello()</span><br><span class="line">        h.hello()                             <span class="comment"># Hello, world</span></span><br><span class="line">        type(Hello)                           <span class="comment"># Hello是一个type类型 返回&lt;class 'type'&gt;</span></span><br><span class="line">        type(h)                               <span class="comment"># h是一个Hello类型 返回&lt;class 'Hello'&gt;</span></span><br><span class="line">    <span class="comment"># 动态类型语言中 类可以动态创建 type函数可用于创建新类型</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(self, name=<span class="string">'world'</span>)</span>:</span>           <span class="comment"># 先定义函数</span></span><br><span class="line">            print(<span class="string">'Hello, %s.'</span> % name)</span><br><span class="line">        Hello = type(<span class="string">'Hello'</span>, (object,), dict(hello=fn))    <span class="comment"># 创建Hello类 type原型: type(name, bases, dict)</span></span><br><span class="line">        h = Hello()                           <span class="comment"># 此时的h和上边的h一致</span></span><br></pre></td></tr></table></figure>

<h2><span id="yi-chang-xiang-guan">异常相关</span><a href="#yi-chang-xiang-guan" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- #捕获异常: </span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">except</span>:                               <span class="comment"># 捕获所有的异常 等同于except Exception:</span></span><br><span class="line">        <span class="keyword">except</span> name:                          <span class="comment"># 捕获指定的异常</span></span><br><span class="line">        <span class="keyword">except</span> name, value:                   <span class="comment"># 捕获指定的异常和额外的数据(实例)</span></span><br><span class="line">        <span class="keyword">except</span> (name1, name2):</span><br><span class="line">        <span class="keyword">except</span> (name1, name2), value:</span><br><span class="line">        <span class="keyword">except</span> name4 <span class="keyword">as</span> X:</span><br><span class="line">        <span class="keyword">else</span>:                                 <span class="comment"># 如果没有发生异常</span></span><br><span class="line">        <span class="keyword">finally</span>:                              <span class="comment"># 总会执行的部分</span></span><br><span class="line">    <span class="comment"># 引发异常: raise子句(raise IndexError)</span></span><br><span class="line">        <span class="keyword">raise</span> &lt;instance&gt;                      <span class="comment"># raise instance of a class, raise IndexError()</span></span><br><span class="line">        raise &lt;class&gt;                         # make and raise instance of a class, raise IndexError</span><br><span class="line">        <span class="keyword">raise</span>                                 <span class="comment"># reraise the most recent exception</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- Python3.x中的异常链: raise exception from otherException</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> X:</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">'Bad'</span>) <span class="keyword">from</span> X</span><br><span class="line">        </span><br><span class="line"><span class="comment">#-- assert子句: assert &lt;test&gt;, &lt;data&gt;</span></span><br><span class="line">    <span class="keyword">assert</span> x &lt; <span class="number">0</span>, <span class="string">'x must be negative'</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- with/as环境管理器:作为常见的try/finally用法模式的替代方案</span></span><br><span class="line">    <span class="keyword">with</span> expression [<span class="keyword">as</span> variable], expression [<span class="keyword">as</span> variable]:</span><br><span class="line">    <span class="comment"># 例子:</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'test.txt'</span>) <span class="keyword">as</span> myfile:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> myfile: print(line)</span><br><span class="line">    <span class="comment"># 等同于:</span></span><br><span class="line">        myfile = open(<span class="string">'test.txt'</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> myfile: print(line)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            myfile.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 用户自定义异常: class Bad(Exception):.....</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Exception超类 / except基类即可捕获到其所有子类</span></span><br><span class="line"><span class="string">    Exception超类有默认的打印消息和状态 当然也可以定制打印显示:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyBad</span><span class="params">(Exception)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'定制的打印消息'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        MyBad()</span><br><span class="line">    <span class="keyword">except</span> MyBad <span class="keyword">as</span> x:</span><br><span class="line">        print(x)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 用户定制异常数据</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FormatError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, line ,file)</span>:</span></span><br><span class="line">            self.line = line</span><br><span class="line">            self.file = file</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">raise</span> FormatError(<span class="number">42</span>, <span class="string">'test.py'</span>)</span><br><span class="line">    <span class="keyword">except</span> FormatError <span class="keyword">as</span> X:</span><br><span class="line">        print(<span class="string">'Error at '</span>, X.file, X.line)</span><br><span class="line">    <span class="comment"># 用户定制异常行为(方法):以记录日志为例</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FormatError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">        logfile = <span class="string">'formaterror.txt'</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, line ,file)</span>:</span></span><br><span class="line">            self.line = line</span><br><span class="line">            self.file = file</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">logger</span><span class="params">(self)</span>:</span></span><br><span class="line">            open(self.logfile, <span class="string">'a'</span>).write(<span class="string">'Error at '</span>, self.file, self.line)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">raise</span> FormatError(<span class="number">42</span>, <span class="string">'test.py'</span>)</span><br><span class="line">    <span class="keyword">except</span> FormatError <span class="keyword">as</span> X:</span><br><span class="line">        X.logger()</span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 关于sys.exc_info:允许一个异常处理器获取对最近引发的异常的访问</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ......</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 此时sys.exc_info()返回一个元组(type, value, traceback)</span></span><br><span class="line">        <span class="comment"># type:正在处理的异常的异常类型</span></span><br><span class="line">        <span class="comment"># value:引发的异常的实例</span></span><br><span class="line">        <span class="comment"># traceback:堆栈信息</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#-- 异常层次</span></span><br><span class="line">    BaseException</span><br><span class="line">    +-- SystemExit</span><br><span class="line">    +-- KeyboardInterrupt</span><br><span class="line">    +-- GeneratorExit</span><br><span class="line">    +-- Exception</span><br><span class="line">        +-- StopIteration</span><br><span class="line">        +-- ArithmeticError</span><br><span class="line">        +-- AssertionError</span><br><span class="line">        +-- AttributeError</span><br><span class="line">        +-- BufferError</span><br><span class="line">        +-- EOFError</span><br><span class="line">        +-- ImportError</span><br><span class="line">        +-- LookupError</span><br><span class="line">        +-- MemoryError</span><br><span class="line">        +-- NameError</span><br><span class="line">        +-- OSError</span><br><span class="line">        +-- ReferenceError</span><br><span class="line">        +-- RuntimeError</span><br><span class="line">        +-- SyntaxError</span><br><span class="line">        +-- SystemError</span><br><span class="line">        +-- TypeError</span><br><span class="line">        +-- ValueError</span><br><span class="line">        +-- Warning</span><br></pre></td></tr></table></figure>

<h2><span id="unicode-he-zi-jie-zi-fu-chuan">unicode和字节字符串</span><a href="#unicode-he-zi-jie-zi-fu-chuan" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- Python的字符串类型</span></span><br><span class="line">    <span class="string">"""Python2.x"""</span></span><br><span class="line">    <span class="comment"># 1.str表示8位文本和二进制数据</span></span><br><span class="line">    <span class="comment"># 2.unicode表示宽字符Unicode文本</span></span><br><span class="line">    <span class="string">"""Python3.x"""</span></span><br><span class="line">    <span class="comment"># 1.str表示Unicode文本（8位或者更宽）</span></span><br><span class="line">    <span class="comment"># 2.bytes表示不可变的二进制数据</span></span><br><span class="line">    <span class="comment"># 3.bytearray是一种可变的bytes类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 字符编码方法</span></span><br><span class="line">    <span class="string">"""ASCII"""</span>                   <span class="comment"># 一个字节，只包含英文字符，0到127，共128个字符，利用函数可以进行字符和数字的相互转换</span></span><br><span class="line">    ord(<span class="string">'a'</span>)                      <span class="comment"># 字符a的ASCII码为97，所以这里返回97</span></span><br><span class="line">    chr(<span class="number">97</span>)                       <span class="comment"># 和上边的过程相反，返回字符'a'</span></span><br><span class="line">    <span class="string">"""Latin-1"""</span>                 <span class="comment"># 一个字节，包含特殊字符，0到255，共256个字符，相当于对ASCII码的扩展</span></span><br><span class="line">    chr(<span class="number">196</span>)                      <span class="comment"># 返回一个特殊字符：Ä</span></span><br><span class="line">    <span class="string">"""Unicode"""</span>                 <span class="comment"># 宽字符，一个字符包含多个字节，一般用于亚洲的字符集，比如中文有好几万字</span></span><br><span class="line">    <span class="string">"""UTF-8"""</span>                   <span class="comment"># 可变字节数，小于128的字符表示为单个字节，128到0X7FF之间的代码转换为两个字节，0X7FF以上的代码转换为3或4个字节</span></span><br><span class="line">    <span class="comment"># 注意：可以看出来，ASCII码是Latin-1和UTF-8的一个子集</span></span><br><span class="line">    <span class="comment"># 注意：utf-8是unicode的一种实现方式，unicode、gbk、gb2312是编码字符集</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 查看Python中的字符串编码名称，查看系统的编码</span></span><br><span class="line">    <span class="keyword">import</span> encodings</span><br><span class="line">    help(encoding)</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    sys.platform                  <span class="comment"># 'win64'</span></span><br><span class="line">    sys.getdefaultencoding()      <span class="comment"># 'utf-8'</span></span><br><span class="line">    sys.getdefaultencoding()      <span class="comment"># 返回当前系统平台的编码类型</span></span><br><span class="line">    sys.getsizeof(object)         <span class="comment"># 返回object占有的bytes的大小</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- 源文件字符集编码声明: 添加注释来指定想要的编码形式 从而改变默认值 注释必须出现在脚本的第一行或者第二行</span></span><br><span class="line">    <span class="string">"""说明：其实这里只会检查#和coding:utf-8，其余的字符都是为了美观加上的"""</span></span><br><span class="line">    <span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line">    <span class="comment"># coding = utf-8</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- #编码: 字符串 --&gt; 原始字节       #解码: 原始字节 --&gt; 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- Python3.x中的字符串应用</span></span><br><span class="line">    s = <span class="string">'...'</span>                     <span class="comment"># 构建一个str对象，不可变对象</span></span><br><span class="line">    b = <span class="string">b'...'</span>                    <span class="comment"># 构建一个bytes对象，不可变对象</span></span><br><span class="line">    s[<span class="number">0</span>], b[<span class="number">0</span>]                    <span class="comment"># 返回('.', 113)</span></span><br><span class="line">    s[<span class="number">1</span>:], b[<span class="number">1</span>:]                  <span class="comment"># 返回('..', b'..')</span></span><br><span class="line">    B = B<span class="string">"""</span></span><br><span class="line"><span class="string">        xxxx</span></span><br><span class="line"><span class="string">        yyyy</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    <span class="comment"># B = b'\nxxxx\nyyyy\n'</span></span><br><span class="line">    <span class="comment"># 编码，将str字符串转化为其raw bytes形式：</span></span><br><span class="line">        str.encode(encoding = <span class="string">'utf-8'</span>, errors = <span class="string">'strict'</span>)</span><br><span class="line">        bytes(str, encoding)</span><br><span class="line">    <span class="comment"># 编码例子：</span></span><br><span class="line">        S = <span class="string">'egg'</span></span><br><span class="line">        S.encode()                    <span class="comment"># b'egg'</span></span><br><span class="line">        bytes(S, encoding = <span class="string">'ascii'</span>)  <span class="comment"># b'egg'</span></span><br><span class="line">    <span class="comment"># 解码，将raw bytes字符串转化为str形式：</span></span><br><span class="line">        bytes.decode(encoding = <span class="string">'utf-8'</span>, errors = <span class="string">'strict'</span>)</span><br><span class="line">        str(bytes_or_buffer[, encoding[, errors]])</span><br><span class="line">    <span class="comment"># 解码例子：</span></span><br><span class="line">        B = <span class="string">b'spam'</span></span><br><span class="line">        B.decode()                <span class="comment"># 'spam'</span></span><br><span class="line">        str(B)                    <span class="comment"># "b'spam'"，不带编码的str调用，结果为打印该bytes对象</span></span><br><span class="line">        str(B, encoding = <span class="string">'ascii'</span>)<span class="comment"># 'spam'，带编码的str调用，结果为转化该bytes对象</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- Python2.x的编码问题</span></span><br><span class="line">    u = <span class="string">u'汉'</span></span><br><span class="line">    <span class="keyword">print</span> repr(u)                 <span class="comment"># u'\xba\xba'</span></span><br><span class="line">    s = u.encode(<span class="string">'UTF-8'</span>)</span><br><span class="line">    <span class="keyword">print</span> repr(s)                 <span class="comment"># '\xc2\xba\xc2\xba'</span></span><br><span class="line">    u2 = s.decode(<span class="string">'UTF-8'</span>)</span><br><span class="line">    <span class="keyword">print</span> repr(u2)                <span class="comment"># u'\xba\xba'</span></span><br><span class="line">    <span class="comment"># 对unicode进行解码是错误的</span></span><br><span class="line">    s2 = u.decode(<span class="string">'UTF-8'</span>)        <span class="comment"># UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)</span></span><br><span class="line">    <span class="comment"># 同样，对str进行编码也是错误的</span></span><br><span class="line">    u2 = s.encode(<span class="string">'UTF-8'</span>)        <span class="comment"># UnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 0: ordinal not in range(128)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- bytes对象</span></span><br><span class="line">    B = <span class="string">b'abc'</span></span><br><span class="line">    B = bytes(<span class="string">'abc'</span>, <span class="string">'ascii'</span>)</span><br><span class="line">    B = bytes([<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>])</span><br><span class="line">    B = <span class="string">'abc'</span>.encode()</span><br><span class="line">    <span class="comment"># bytes对象的方法调用基本和str类型一致 但:B[0]返回的是ASCII码值97, 而不是b'a'</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- #文本文件: 根据Unicode编码来解释文件内容，要么是平台的默认编码，要么是指定的编码类型</span></span><br><span class="line">    <span class="comment"># 二进制文件：表示字节值的整数的一个序列 open('bin.txt', 'rb')</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#-- Unicode文件</span></span><br><span class="line">    s = <span class="string">'A\xc4B\xe8C'</span>             <span class="comment"># s = 'A?BèC'  len(s) = 5</span></span><br><span class="line">    <span class="comment">#手动编码</span></span><br><span class="line">        l = s.encode(<span class="string">'latin-1'</span>)   <span class="comment"># l = b'A\xc4B\xe8C'  len(l) = 5</span></span><br><span class="line">        u = s.encode(<span class="string">'utf-8'</span>)     <span class="comment"># u = b'A\xc3\x84B\xc3\xa8C'  len(u) = 7</span></span><br><span class="line">    <span class="comment">#文件输出编码</span></span><br><span class="line">        open(<span class="string">'latindata'</span>, <span class="string">'w'</span>, encoding = <span class="string">'latin-1'</span>).write(s)</span><br><span class="line">        l = open(<span class="string">'latindata'</span>, <span class="string">'rb'</span>).read()                        <span class="comment"># l = b'A\xc4B\xe8C'  len(l) = 5</span></span><br><span class="line">        open(<span class="string">'uft8data'</span>, <span class="string">'w'</span>, encoding = <span class="string">'utf-8'</span>).write(s)</span><br><span class="line">        u = open(<span class="string">'uft8data'</span>, <span class="string">'rb'</span>).read()                         <span class="comment"># u = b'A\xc3\x84B\xc3\xa8C'  len(u) = 7</span></span><br><span class="line">    <span class="comment">#文件输入编码</span></span><br><span class="line">        s = open(<span class="string">'latindata'</span>, <span class="string">'r'</span>, encoding = <span class="string">'latin-1'</span>).read()   <span class="comment"># s = 'A?BèC'  len(s) = 5</span></span><br><span class="line">        s = open(<span class="string">'latindata'</span>, <span class="string">'rb'</span>).read().decode(<span class="string">'latin-1'</span>)      <span class="comment"># s = 'A?BèC'  len(s) = 5</span></span><br><span class="line">        s = open(<span class="string">'utf8data'</span>, <span class="string">'r'</span>, encoding = <span class="string">'utf-8'</span>).read()      <span class="comment"># s = 'A?BèC'  len(s) = 5</span></span><br><span class="line">        s = open(<span class="string">'utf8data'</span>, <span class="string">'rb'</span>).read().decode(<span class="string">'utf-8'</span>)         <span class="comment"># s = 'A?BèC'  len(s) = 5</span></span><br></pre></td></tr></table></figure>

<h2><span id="qi-ta">其他</span><a href="#qi-ta" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- Python实现任意深度的赋值 例如a[0] = 'value1'; a[1][2] = 'value2'; a[3][4][5] = 'value3'</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyDict</span><span class="params">(dict)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span>                 <span class="comment"># 该函数不做任何改动 这里只是为了输出</span></span><br><span class="line">            print(<span class="string">'setitem:'</span>, key, value, self)</span><br><span class="line">            super().__setitem__(key, value)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span>                       <span class="comment"># 主要技巧在该函数</span></span><br><span class="line">            print(<span class="string">'getitem:'</span>, item, self)                  <span class="comment"># 输出信息</span></span><br><span class="line">            <span class="comment"># 基本思路: a[1][2]赋值时 需要先取出a[1] 然后给a[1]的[2]赋值</span></span><br><span class="line">            <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> self:                           <span class="comment"># 如果a[1]不存在 则需要新建一个dict 并使得a[1] = dict</span></span><br><span class="line">                temp = MyDict()                            <span class="comment"># 新建的dict: temp</span></span><br><span class="line">                super().__setitem__(item, temp)            <span class="comment"># 赋值a[1] = temp</span></span><br><span class="line">                <span class="keyword">return</span> temp                                <span class="comment"># 返回temp 使得temp[2] = value有效</span></span><br><span class="line">            <span class="keyword">return</span> super().__getitem__(item)               <span class="comment"># 如果a[1]存在 则直接返回a[1]</span></span><br><span class="line">    <span class="comment"># 例子:</span></span><br><span class="line">        test = MyDict()</span><br><span class="line">        test[<span class="number">0</span>] = <span class="string">'test'</span></span><br><span class="line">        print(test[<span class="number">0</span>])</span><br><span class="line">        test[<span class="number">1</span>][<span class="number">2</span>] = <span class="string">'test1'</span></span><br><span class="line">        print(test[<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">        test[<span class="number">1</span>][<span class="number">3</span>] = <span class="string">'test2'</span></span><br><span class="line">        print(test[<span class="number">1</span>][<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#-- Python中的多维数组</span></span><br><span class="line">    lists = [<span class="number">0</span>] * <span class="number">3</span>                                        <span class="comment"># 扩展list，结果为[0, 0, 0]</span></span><br><span class="line">    lists = [[]] * <span class="number">3</span>                                       <span class="comment"># 多维数组，结果为[[], [], []]，但有问题，往下看</span></span><br><span class="line">    lists[<span class="number">0</span>].append(<span class="number">3</span>)                                     <span class="comment"># 期望看到的结果[[3], [], []]，实际结果[[3], [3], [3]]，原因：list*n操作，是浅拷贝，如何避免？往下看</span></span><br><span class="line">    lists = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]                         <span class="comment"># 多维数组，结果为[[], [], []]</span></span><br><span class="line">    lists[<span class="number">0</span>].append(<span class="number">3</span>)                                     <span class="comment"># 结果为[[3], [], []]</span></span><br><span class="line">    lists[<span class="number">1</span>].append(<span class="number">6</span>)                                     <span class="comment"># 结果为[[3], [6], []]</span></span><br><span class="line">    lists[<span class="number">2</span>].append(<span class="number">9</span>)                                     <span class="comment"># 结果为[[3], [6], [9]]</span></span><br><span class="line">    lists = [[[] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]     <span class="comment"># 3行4列，且每一个元素为[]</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>springMVC</title>
    <url>/2020/01/31/springMVC/</url>
    <content><![CDATA[<center>springMVC基础</center>
<a id="more"></a>

<div class="toc">

<!-- toc -->

<ul>
<li><a href="#ji-chu-zhi-shi">基础知识</a></li>
<li><a href="#zhu-jie-jie-xi">注解解析</a><ul>
<li><a href="#requestmapping">Requestmapping</a></li>
</ul>
</li>
<li><a href="#chang-yong-zhu-jie">常用注解</a><ul>
<li><a href="#requestparam">RequestParam</a></li>
<li><a href="#requestbody">RequestBody</a></li>
<li><a href="#pathvariable">PathVariable</a></li>
<li><a href="#rest-feng-ge-url">REST风格URL</a></li>
<li><a href="#requestheader">RequestHeader</a></li>
<li><a href="#cookievalue">CookieValue</a></li>
<li><a href="#modelattribute">ModelAttribute</a></li>
<li><a href="#sessionattribute">SessionAttribute</a></li>
</ul>
</li>
<li><a href="#xiang-ying-shu-ju-he-jie-guo-shi-tu">响应数据和结果视图</a><ul>
<li><a href="#zi-fu-chuan">字符串</a></li>
<li><a href="#void">void</a></li>
<li><a href="#modelandview">ModelAndView</a></li>
<li><a href="#forward-zhuan-fa">forward转发</a></li>
<li><a href="#redirect-chong-ding-xiang">Redirect重定向</a></li>
</ul>
</li>
<li><a href="#springmvc-de-yi-chang-chu-li">SpringMVC的异常处理</a></li>
<li><a href="#springmvc-zhong-de-lan-jie-qi">SpringMVC中的拦截器</a></li>
<li><a href="#shi-li-yan-zheng-yong-hu-deng-lu">示例(验证用户登录)</a><ul>
<li><a href="#shi-xian-si-lu">实现思路</a></li>
<li><a href="#kong-zhi-qi">控制器</a></li>
<li><a href="#lan-jie-qi">拦截器</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<p>[toc]</p>
<h2><span id="ji-chu-zhi-shi">基础知识</span><a href="#ji-chu-zhi-shi" class="header-anchor">#</a></h2><ol>
<li><p>三层架构</p>
<ul>
<li>表现层（web层，负责接收客户端请求，向客户端响应结果。包括展示层和控制层）</li>
<li>业务层（service层，处理业务逻辑）</li>
<li>持久层（dao层，负责数据持久化）</li>
</ul>
</li>
<li><p>MVC模型</p>
<p>Model View Controller，一种用于创建web应用程序表现层的模式。</p>
<p>model：数据模型，作用一般情况下用于封装数据</p>
<p>view：指jsp或html，展示数据，通常视图一句模型数据创建</p>
<p>controller：应用程序中处理用户交互的部分，作用一般就是处理程序逻辑的</p>
</li>
<li><p>springMVC</p>
<p>通过一套注解，让一个简单的Java类成为处理请求的控制器，无须实现任何接口，同时支持RESTful风格的请求。</p>
</li>
<li><img src="/2020/01/31/springMVC/MVC%E6%A8%A1%E5%9E%8B.png" class title="MVC模型">
</li>
<li><p>springMVC的优势</p>
<p>1、清晰的角色划分：</p>
<pre><code>前端控制器（DispatcherServlet）
请求到处理器映射（HandlerMapping）
处理器适配器（HandlerAdapter）
视图解析器（ViewResolver）
处理器或页面控制器（Controller）
验证器（ Validator）
命令对象（Command 请求参数绑定到的对象就叫命令对象）
表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。</code></pre><p>2、分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。<br>3、由于命令对象就是一个 POJO，无需继承框架特定 API，可以使用命令对象直接作为业务对象。<br>4、和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的。<br>5、可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。<br>6、可定制性， HandlerMapping、 ViewResolver 等能够非常简单的定制。<br>7、功能强大的数据验证、格式化、绑定机制。<br>8、利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试。<br>9、本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。<br>10、强大的 JSP 标签库，使 JSP 编写更容易。<br>………………还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配置支持等等。 </p>
</li>
<li><p>springMVC请求响应流程</p>
<img src="/2020/01/31/springMVC/MVC%E7%9B%B8%E5%BA%94%E6%B5%81%E7%A8%8B.png" class title="MVC相应流程">



</li>
</ol>
<h2><span id="zhu-jie-jie-xi">注解解析</span><a href="#zhu-jie-jie-xi" class="header-anchor">#</a></h2><h3><span id="requestmapping">Requestmapping</span><a href="#requestmapping" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用于建立URL和处理方法之间的对应关系。</p>
<p>出现位置：</p>
<ul>
<li><p>类上：</p>
<p>请求URL的第一级访问目录，不写就相当于应用的根目录，写得话以/开头，它出现的目的是为了使URL可以按照模块话管理：/account/add  </p>
</li>
<li><p>方法上：</p>
<p>请求URL的第二级访问目录</p>
</li>
</ul>
<p>属性：</p>
<ul>
<li>value：用于指定请求的URL，和path属性的作用是一样的</li>
<li>method：用于指定请求的方式</li>
<li>params：用于指定限制请求的参数的条件。支持简单的表达式，要求请求参数key和value必须和配置的一模一样，例如：params = {“accountName”}，表示请求参数必须有 accountName </li>
<li>headers：用于指定限制请求的消息头的条件</li>
</ul>
<p>以上属性只要出现2个或以上，他们的关系是“与”的关系</p>
<h2><span id="chang-yong-zhu-jie">常用注解</span><a href="#chang-yong-zhu-jie" class="header-anchor">#</a></h2><h3><span id="requestparam">RequestParam</span><a href="#requestparam" class="header-anchor">#</a></h3><p>把请求中指定名称的参数给控制器中的形参赋值。</p>
<p>属性：</p>
<ul>
<li>value：请求参数中的名称</li>
<li>required：请求参数中是否必须提供的此参数。默认值：true。表示必须提供，不提供将报错</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useRequestParam"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestParam</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String username,</span></span><br><span class="line"><span class="function">							@<span class="title">RequestParam</span><span class="params">(value=<span class="string">"age"</span>,required=<span class="keyword">false</span>)</span>Integer age)</span>&#123;</span><br><span class="line">    System.out.println(username+<span class="string">","</span>+age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="requestbody">RequestBody</span><a href="#requestbody" class="header-anchor">#</a></h3><p>用于获取请求体内容，直接使用得到是key=value&amp;key=value…结构的数据</p>
<p>get请求方式不适用</p>
<p>属性：</p>
<p>required：默认值：true，当取值为true，get请求方式会报错，如果是false，get请求得到null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useRequestBody"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestBody</span><span class="params">(@RequestBody(required=<span class="keyword">false</span>)</span> String body)</span>&#123;</span><br><span class="line">    System.out.println(body);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="pathvariable">PathVariable</span><a href="#pathvariable" class="header-anchor">#</a></h3><p>用于绑定url中的占位符，例如：请求url中/delete/{id}，这个{id}就是url占位符。</p>
<p>url是spring支持rest风格url 的一个重要标志</p>
<p>属性：</p>
<ul>
<li>value：用于指定url中占位符名称</li>
<li>required：是否必须提供</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/usePathVariable/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">usePathVariable</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="rest-feng-ge-url">REST风格URL</span><a href="#rest-feng-ge-url" class="header-anchor">#</a></h3><ul>
<li><p>什么是 rest：</p>
<p>REST（英文： Representational State Transfer，简称 REST）描述了一个架构样式的网络系统，比如 web 应用程序。它首次出现在 2000 年 Roy Fielding 的博士论文中，他是 HTTP 规范的主要编写者之一。在目前主流的三种 Web 服务交互方案中， REST 相比于 SOAP（Simple Object Access protocol，简单对象访问协议）以及 XML-RPC 更加简单明了，无论是对 URL 的处理还是对 Payload 的编码， REST 都倾向于用更加简单轻量的方法设计和实现。值得注意的是 REST 并没有一个明确的标准，而更像是一种设计的风格。<br>它本身并没有什么实用性，其核心价值在于如何设计出符合 REST 风格的网络接口。</p>
</li>
<li><p>restful 的优点<br>它结构清晰、符合标准、易于理解、 扩展方便，所以正得到越来越多网站的采用。</p>
</li>
<li><p>restful 的特性：<br>资源（Resources） ： 网络上的一个实体，或者说是网络上的一个具体信息。<br>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。可以用一个 URI（统一<br>资源定位符）指向它，每种资源对应一个特定的 URI 。要获取这个资源，访问它的 URI 就可以，因此 URI 即为每一个资源的独一无二的识别符。<br>表现层（Representation） ： 把资源具体呈现出来的形式，叫做它的表现层 （Representation）。<br>比如，文本可以用 txt 格式表现，也可以用 HTML 格式、 XML 格式、 JSON 格式表现，甚至可以采用二<br>进制格式。<br>状态转化（State Transfer） ： 每 发出一个请求，就代表了客户端和服务器的一次交互过程。</p>
</li>
</ul>
<p>HTTP 协议，是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，<br>必须通过某种手段， 让服务器端发生“状态转化” （State Transfer）。而这种转化是建立在表现层之上的，所以<br>就是 “表现层状态转化” 。具体说，就是 HTTP 协议里面，四个表示操作方式的动词： GET 、 POST 、 PUT、<br>DELETE。它们分别对应四种基本操作： GET 用来获取资源， POST 用来新建资源， PUT 用来更新资源， DELETE 用来删除资源。</p>
<ul>
<li><p>restful 的示例：<br>/account/1 HTTP GET ： 得到 id = 1 的 account<br>/account/1 HTTP DELETE： 删除 id = 1 的 account<br>/account/1 HTTP PUT： 更新 id = 1 的 account  </p>
<p>/account HTTP POST： 新增 account  </p>
</li>
</ul>
<h3><span id="requestheader">RequestHeader</span><a href="#requestheader" class="header-anchor">#</a></h3><p>用于获取请求消息头</p>
<p>属性：</p>
<ul>
<li><p>value：提供消息头名称</p>
</li>
<li><p>required：是否必须有</p>
<p>一般不怎么用</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useRequestHeader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestHeader</span><span class="params">(@RequestHeader(value=<span class="string">"Accept-Language"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">							required=<span class="keyword">false</span>)</span>String requestHeader)</span>&#123;</span><br><span class="line">    System.out.println(requestHeader);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="cookievalue">CookieValue</span><a href="#cookievalue" class="header-anchor">#</a></h3><p>用于把指定cookie名称的值传入控制器方法参数</p>
<p>属性：</p>
<ul>
<li>value：指定cookie的名称</li>
<li>required：是否必须</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useCookieValue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useCookieValue</span><span class="params">(@CookieValue(value=<span class="string">"JSESSIONID"</span>,required=<span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">							String cookieValue)</span>&#123;</span><br><span class="line">	System.out.println(cookieValue);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="modelattribute">ModelAttribute</span><a href="#modelattribute" class="header-anchor">#</a></h3><p>用于修饰方法和参数。出现在<strong>方法</strong>上，表示当前方法会在控制器的方法执行之前，先执行。它可以修饰没有返回值的方法，也可以修饰有具体返回值的方法。出现在<strong>参数</strong>上，获取指定的数据给参数赋值。</p>
<p>属性：</p>
<ul>
<li>value，获取数据的key，key可以是POJO的属性名称，也可以是map结构的key。</li>
</ul>
<p>应用场景：</p>
<p>当表单提交数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据。</p>
<p>例如：我们在编辑一个用户时，用户有一个创建信息字段，该字段的值是不允许被修改的。在提交表单数<br>据是肯定没有此字段的内容，一旦更新会把该字段内容置为 null，此时就可以使用此注解解决问题。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showModel</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"执行了 showModel 方法"</span>+user.getUsername());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testModelAttribute"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"执行了控制器的方法"</span>+user.getUsername());</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="sessionattribute">SessionAttribute</span><a href="#sessionattribute" class="header-anchor">#</a></h3><p>用于多次执行控制器方法间的参数共享</p>
<p>属性：value、type：用于指定存入的数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">"sessionAttributeController"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/springmvc"</span>)</span><br><span class="line"><span class="meta">@SessionAttributes</span>(value =&#123;<span class="string">"username"</span>,<span class="string">"password"</span>&#125;,types=&#123;Integer<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SessionAttributeController</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 把数据存入 SessionAttribute</span></span><br><span class="line"><span class="comment">* Model 是 spring 提供的一个接口，该接口有一个实现类 ExtendedModelMap</span></span><br><span class="line"><span class="comment">* 该类继承了 ModelMap，而 ModelMap 就是 LinkedHashMap 子类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testPut"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testPut</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"username"</span>, <span class="string">"泰斯特"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"password"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"age"</span>, <span class="number">31</span>);</span><br><span class="line">        <span class="comment">//跳转之前将数据保存到 username、 password 和 age 中，因为注解@SessionAttribute 中有这几个参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testGet"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testGet</span><span class="params">(ModelMap model)</span></span>&#123;</span><br><span class="line">   		System.out.println(model.get(<span class="string">"username"</span>)+<span class="string">";"</span>+model.get(<span class="string">"password"</span>)+<span class="string">";"</span>+model.get(<span class="string">"age"</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testClean"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">complete</span><span class="params">(SessionStatus sessionStatus)</span></span>&#123;</span><br><span class="line">    	sessionStatus.setComplete();</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="xiang-ying-shu-ju-he-jie-guo-shi-tu">响应数据和结果视图</span><a href="#xiang-ying-shu-ju-he-jie-guo-shi-tu" class="header-anchor">#</a></h2><p>返回值分类</p>
<h3><span id="zi-fu-chuan">字符串</span><a href="#zi-fu-chuan" class="header-anchor">#</a></h3><p>controller 方法返回字符串可以指定逻辑视图名，通过视图解析器解析为物理视图地址。  </p>
<h3><span id="void">void</span><a href="#void" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testReturnVoid"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReturnVoid</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在controller 方法形参上可以定义 request 和 response，使用 request 或 response 指定响应结果：<br>1、使用 request 转向页面，如下：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">"/WEB-INF/pages/success.jsp"</span>).forward(request,response);</span><br></pre></td></tr></table></figure>

<p>2、也可以通过 response 页面重定向：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">"testRetrunString"</span>)</span><br></pre></td></tr></table></figure>

<p>3、也可以通过 response 指定响应结果， 例如响应 json 数据：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"json 串"</span>);</span><br></pre></td></tr></table></figure>

<h3><span id="modelandview">ModelAndView</span><a href="#modelandview" class="header-anchor">#</a></h3><p>ModelAndView 是 SpringMVC 为我们提供的一个对象，该对象也可以用作控制器方法的返回值。<br>该对象中有两个方法  </p>
<img src="/2020/01/31/springMVC/ModelAndView%E6%96%B9%E6%B3%95.png" class title="ModelAndView方法">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testReturnModelAndView"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testReturnModelAndView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.addObject(<span class="string">"username"</span>, <span class="string">"张三"</span>);</span><br><span class="line">    mv.setViewName(<span class="string">"success"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：<br>我们在页面上上获取使用的是 requestScope.username 取的，所以返回 ModelAndView 类型时，浏览器跳转只能是请求转发。  </p>
<p>转发和重定向</p>
<h3><span id="forward-zhuan-fa">forward转发</span><a href="#forward-zhuan-fa" class="header-anchor">#</a></h3><p>controller 方法在提供了 String 类型的返回值之后，默认就是请求转发。我们也可以写成：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testForward"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForward</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"AccountController 的 testForward 方法执行了。。。。 "</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/WEB-INF/pages/success.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，如果用了 formward： 则路径必须写成实际视图 url，不能写逻辑视图。<br>它相当于“request.getRequestDispatcher(“url”).forward(request,response)” 。使用请求转发，既可以转发到 jsp，也可以转发到其他的控制器方法。  </p>
<h3><span id="redirect-chong-ding-xiang">Redirect重定向</span><a href="#redirect-chong-ding-xiang" class="header-anchor">#</a></h3><p>contrller 方法提供了一个 String 类型返回值之后， 它需要在返回值里使用:redirect:  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testRedirect"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedirect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"AccountController 的 testRedirect 方法执行了。。。。 "</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"redirect:testReturnModelAndView"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它相当于“response.sendRedirect(url)” 。需要注意的是，如果是重定向到 jsp 页面，则 jsp 页面不能写在 WEB-INF 目录中，否则无法找到。  </p>
<p>ResponseBody响应json数据</p>
<p>作用：<br>该注解用于将 Controller 的方法返回的对象，通过 HttpMessageConverter 接口转换为指定格式的数据如： json,xml 等，通过 Response 响应给客户端  </p>
<h2><span id="springmvc-de-yi-chang-chu-li">SpringMVC的异常处理</span><a href="#springmvc-de-yi-chang-chu-li" class="header-anchor">#</a></h2><p>系统中异常包括两类：预期异常和运行时异常 RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。<br>系统的 dao、 service、 controller 出现都通过 throws Exception 向上抛出，最后由 springmvc 前端控制器交由异常处理器进行异常处理，如下图：  </p>
<img src="/2020/01/31/springMVC/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%80%9D%E8%B7%AF.png" class title="异常处理思路">

<p>自定义异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String message;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义异常处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">    			                  HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        CustomException customException = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//如果抛出的是系统自定义异常则直接转换</span></span><br><span class="line">        <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> CustomException)&#123;</span><br><span class="line">            customException = (CustomException)ex;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果抛出的不是系统自定义异常则重新构造一个系统错误异常。</span></span><br><span class="line">            customException = <span class="keyword">new</span> CustomException(<span class="string">"系统错误，请与系统管理 员联系！ "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">"message"</span>, customException.getMessage());</span><br><span class="line">        modelAndView.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="springmvc-zhong-de-lan-jie-qi">SpringMVC中的拦截器</span><a href="#springmvc-zhong-de-lan-jie-qi" class="header-anchor">#</a></h2><ol>
<li><p>拦截器作用</p>
<p>Spring MVC 的处理器拦截器类似于 Servlet 开发中的过滤器 Filter，用于对处理器进行预处理和后处理。<br>用户可以自己定义一些拦截器来实现特定的功能。<br>谈到拦截器，还要向大家提一个词——拦截器链（Interceptor Chain）。拦截器链就是将拦截器按一定的顺序联结成一条链。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。<br>说到这里，可能大家脑海中有了一个疑问，这不是我们之前学的过滤器吗？是的它和过滤器是有几分相似，但是也有区别，接下来我们就来说说他们的区别：</p>
<pre><code>过滤器是 servlet 规范中的一部分， 任何 java web 工程都可以使用。
拦截器是 SpringMVC 框架自己的，只有使用了 SpringMVC 框架的工程才能用。
过滤器在 url-pattern 中配置了/*之后，可以对所有要访问的资源拦截。
拦截器它是只会拦截访问的控制器方法，如果访问的是 jsp， html,css,image 或者 js 是不会进行拦截的。</code></pre><p>它也是 AOP 思想的具体应用。<br>我们要想自定义拦截器， 要求必须实现： <strong>HandlerInterceptor 接口。</strong>  </p>
</li>
<li><p>编写普通类实现HandlerInterceptor接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerInterceptorDemo1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"preHandle 拦截器拦截了"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,Object handler,ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">"postHandle 方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">"afterCompletion 方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerInterceptorDemo1"</span></span></span><br><span class="line"><span class="tag">        	<span class="attr">class</span>=<span class="string">"com.itheima.web.interceptor.HandlerInterceptorDemo1"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2><span id="shi-li-yan-zheng-yong-hu-deng-lu">示例(验证用户登录)</span><a href="#shi-li-yan-zheng-yong-hu-deng-lu" class="header-anchor">#</a></h2><h3><span id="shi-xian-si-lu">实现思路</span><a href="#shi-xian-si-lu" class="header-anchor">#</a></h3><p>1、 有一个登录页面，需要写一个 controller 访问页面<br>2、 登录页面有一提交表单的动作。需要在 controller 中处理。<br>    2.1、 判断用户名密码是否正确<br>    2.2、 如果正确 向 session 中写入用户信息<br>    2.3、 返回登录成功。<br>3、 拦截用户请求，判断用户是否登录<br>    3.1、 如果用户已经登录。放行<br>    3.2、 如果用户未登录，跳转到登录页面  </p>
<h3><span id="kong-zhi-qi">控制器</span><a href="#kong-zhi-qi" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//登陆页面</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(Model model)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//登陆提交</span></span><br><span class="line"><span class="comment">//userid：用户账号， pwd：密码</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/loginsubmit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">loginsubmit</span><span class="params">(HttpSession session,String userid,String pwd)</span><span class="keyword">throws</span></span></span><br><span class="line"><span class="function">Exception</span>&#123;</span><br><span class="line"><span class="comment">//向 session 记录用户身份信息</span></span><br><span class="line">session.setAttribute(<span class="string">"activeUser"</span>, userid);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/main.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/logout"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpSession session)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//session 过期</span></span><br><span class="line">session.invalidate();</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="lan-jie-qi">拦截器</span><a href="#lan-jie-qi" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Public <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">    						HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//如果是登录页面则放行</span></span><br><span class="line">        <span class="keyword">if</span>(request.getRequestURI().indexOf(<span class="string">"login.action"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">//如果用户已登录也放行</span></span><br><span class="line">        <span class="keyword">if</span>(session.getAttribute(<span class="string">"user"</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用户没有登录挑战到登录页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/login.jsp"</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springMVC</category>
      </categories>
      <tags>
        <tag>springMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>spring学习笔记：JDBCTemplate</title>
    <url>/2019/12/29/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07%EF%BC%9AJDBCTemplate/</url>
    <content><![CDATA[<center>JDBCTemplate</center>

<a id="more"></a>

<!--toc-->

<p>JdbcTemplate源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    setDataSource(dataSource);</span><br><span class="line">    afterPropertiesSet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdbcTemplate</span><span class="params">(DataSource dataSource, <span class="keyword">boolean</span> lazyInit)</span> </span>&#123;</span><br><span class="line">    setDataSource(dataSource);</span><br><span class="line">    setLazyInit(lazyInit);</span><br><span class="line">    afterPropertiesSet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="spring-zhong-pei-zhi-shu-ju-yuan">spring中配置数据源</span><a href="#spring-zhong-pei-zhi-shu-ju-yuan" class="header-anchor">#</a></h2><p>除默认构造函数外，都需要提供一个数据源，有set方法，可以在配置文件中配置这些对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置C3P0数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///paul"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置DBCP数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:// /paul"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置spring内置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///paul"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或定义属性文件：</p>
<p>定义属性文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql:///paul</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure>

<p>引入外部的属性文件</p>
<p>一</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部属性文件： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>二</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2><span id="jdbctemplate-zeng-shan-gai-cha-cao-zuo">JdbcTemplate增删改查操作</span><a href="#jdbctemplate-zeng-shan-gai-cha-cao-zuo" class="header-anchor">#</a></h2><ol>
<li><p>在spring配置文件中配置JdbcTemplate</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个数据库的操作模板： JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///paul"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取 Spring 容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据 id 获取 bean 对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        jt.execute(<span class="string">"insert into account(name,money)values('eee',500)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取 Spring 容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据 id 获取 bean 对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//保存</span></span><br><span class="line">        jt.update(<span class="string">"insert into account(name,money)values(?,?)"</span>,<span class="string">"fff"</span>,<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取 Spring 容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据 id 获取 bean 对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        jt.update(<span class="string">"update account set money = money-? where id = ?"</span>,<span class="number">300</span>,<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取 Spring 容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据 id 获取 bean 对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        jt.update(<span class="string">"delete from account where id = ?"</span>,<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取 Spring 容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据 id 获取 bean 对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//查询所有</span></span><br><span class="line">        List&lt;Account&gt; accounts = jt.query(<span class="string">"select * from account where money &gt; ? "</span>,</span><br><span class="line">        <span class="keyword">new</span> AccountRowMapper(), <span class="number">500</span>);</span><br><span class="line">        <span class="keyword">for</span>(Account o : accounts)&#123;</span><br><span class="line">        	System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Account</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">        account.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">        account.setMoney(rs.getFloat(<span class="string">"money"</span>));</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 RowMapper 的方式：常用的方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取 Spring 容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据 id 获取 bean 对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//查询一个</span></span><br><span class="line">        List&lt;Account&gt; as = jt.query(<span class="string">"select * from account where id = ? "</span>,</span><br><span class="line">        <span class="keyword">new</span> AccountRowMapper(), <span class="number">55</span>);</span><br><span class="line">        System.out.println(as.isEmpty()?<span class="string">"没有结果"</span>:as.get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用 ResultSetExtractor 的方式:不常用的方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取 Spring 容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据 id 获取 bean 对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//查询一个</span></span><br><span class="line">        Account account = jt.query(<span class="string">"select * from account where id = ?"</span>,</span><br><span class="line">        <span class="keyword">new</span> AccountResultSetExtractor(),<span class="number">3</span>);</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取 Spring 容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据 id 获取 bean 对象</span></span><br><span class="line">            JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//查询返回一行一列：使用聚合函数，在不使用 group by 字句时，都是返回一行一列。最长用的</span></span><br><span class="line">        就是分页中获取总记录条数</span><br><span class="line">        Integer total = jt.queryForObject(<span class="string">"select count(*) from account where money &gt; ?"</span>,Integer<span class="class">.<span class="keyword">class</span>,500)</span>;</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="zai-dao-zhong-shi-yong-jdbctemplate">在dao中使用JdbcTemplate</span><a href="#zai-dao-zhong-shi-yong-jdbctemplate" class="header-anchor">#</a></h2><ol>
<li><p>准备实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的实体</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Float money)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">"Account [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", money="</span> + money + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>第一种方式：在dao中定义JdbcTemplate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function">Account <span class="title">findAccountByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的持久层实现类</span></span><br><span class="line"><span class="comment">* 此版本的 dao，需要给 dao 注入 JdbcTemplate</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = jdbcTemplate.query(<span class="string">"select * from account where id = ?"</span>,<span class="keyword">new</span> AccountRowMapper(),id);</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()?<span class="keyword">null</span>:list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = jdbcTemplate.query(<span class="string">"select * from account where name = ?"</span>,<span class="keyword">new</span> AccountRowMapper(),name);</span><br><span class="line">        <span class="keyword">if</span>(list.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">if</span>(list.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        	<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一，不是只有一个账户对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"update account set money = ? where id = ?"</span>,account.getMoney(),account.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个 dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入 jdbcTemplate --&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个数据库的操作模板： JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///paul"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种方式：让dao继承JdbcDaoSupport</p>
<p>源码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">extends</span> <span class="title">DaoSupport</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义对象</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="comment">//set 方法注入数据源，判断是否注入了，注入了就创建 JdbcTemplate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.jdbcTemplate == <span class="keyword">null</span> || dataSource != <span class="keyword">this</span>.jdbcTemplate.getDataSource())&#123; <span class="comment">//如果提供了数据源就创建 JdbcTemplate</span></span><br><span class="line">            <span class="keyword">this</span>.jdbcTemplate = createJdbcTemplate(dataSource);</span><br><span class="line">            initTemplateConfig();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用数据源创建 JdcbTemplate</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> JdbcTemplate <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当然，我们也可以通过注入 JdbcTemplate 对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">        initTemplateConfig();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用 getJdbcTmeplate 方法获取操作模板对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">this</span>.jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"><span class="function">Account <span class="title">findAccountByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的持久层实现类</span></span><br><span class="line"><span class="comment">* 此版本 dao，只需要给它的父类注入一个数据源</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl2</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//getJdbcTemplate()方法是从父类上继承下来的。</span></span><br><span class="line">        List&lt;Account&gt; list = getJdbcTemplate().query(<span class="string">"select * from account where id = ? "</span>,<span class="keyword">new</span> AccountRowMapper(),id);</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()?<span class="keyword">null</span>:list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//getJdbcTemplate()方法是从父类上继承下来的。</span></span><br><span class="line">        List&lt;Account&gt; list = getJdbcTemplate().query(<span class="string">"select * from account where name = ? "</span>,<span class="keyword">new</span> AccountRowMapper(),name);</span><br><span class="line">        <span class="keyword">if</span>(list.isEmpty())&#123;</span><br><span class="line">        	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        	<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一，不是只有一个账户对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//getJdbcTemplate()方法是从父类上继承下来的。</span></span><br><span class="line">        getJdbcTemplate().update(<span class="string">"update account set money = ? where id = ?"</span>,account.getMoney(),account.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 dao2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao2"</span> <span class="attr">class</span>=<span class="string">"com.dao.impl.AccountDaoImpl2"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入 dataSource --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///paul"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第一种在Dao类中定义JdbcTemplate的方式，适用于所有配置方法(xml和注解都可以)</p>
<p>第二种让Dao继承JdbcDaoSupport的方式，只能用于基于XML的方式</p>
</li>
</ol>
<h2><span id="spring-zhong-de-shi-wu-kong-zhi">spring中的事务控制</span><a href="#spring-zhong-de-shi-wu-kong-zhi" class="header-anchor">#</a></h2>]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring学习笔记6：springAOP</title>
    <url>/2019/12/29/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06%EF%BC%9AspringAOP/</url>
    <content><![CDATA[<center>springAOP配置</center>

<a id="more"></a>

<!--toc-->

<p>利用动态代理解决重复代码等问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建账户业务层实现类的代理对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IAccountService <span class="title">getAccountService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.定义被代理对象</span></span><br><span class="line">        <span class="keyword">final</span> IAccountService accountService = <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">        <span class="comment">//2.创建代理对象</span></span><br><span class="line">        IAccountService proxyAccountService = (IAccountService)Proxy.newProxyInstance(accountService.getClass().getClassLoader(),accountService.getClass().getInterfaces(),<span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * 执行被代理对象的任何方法，都会经过该方法。</span></span><br><span class="line"><span class="comment">            * 此处添加事务控制</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method,Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//开启事务</span></span><br><span class="line">                    TransactionManager.beginTransaction();</span><br><span class="line">                    <span class="comment">//执行业务层方法</span></span><br><span class="line">                    rtValue = method.invoke(accountService, args);</span><br><span class="line">                    <span class="comment">//提交事务</span></span><br><span class="line">                    TransactionManager.commit();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">                    <span class="comment">//回滚事务</span></span><br><span class="line">                    TransactionManager.rollback();</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//释放资源</span></span><br><span class="line">                    TransactionManager.release();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> rtValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> proxyAccountService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="spring-de-aop-pei-zhi">spring的AOP配置</span><a href="#spring-de-aop-pei-zhi" class="header-anchor">#</a></h2><h3><span id="xiang-guan-zhu-yu">相关术语</span><a href="#xiang-guan-zhu-yu" class="header-anchor">#</a></h3><ul>
<li>Joinpoint（连接点）:指被拦截的点，在spring中，这些点指方法，因为spring只支持方法类型的连接点</li>
<li>Pointcut（切入点）:指对哪些Jointpoint进行拦截的定义</li>
<li>Advice（通知/增强）:指拦截到Joinpoint之后所要做的事情，前置、后置、异常、最终、环绕通知</li>
<li>Introduction（引介）：一种 特殊的通知在不修改类代码的前提下，Introduction可在运行期为类动态地添加一些方法或Field</li>
<li>Target（目标对象）：代理的目标对象</li>
<li>Weaving（织入）：指增强应用到目标对象来创建新的代理对象的过程，spring采用动态代理织入，AspectJ采用编译期织入和类加载期织入</li>
<li>Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类</li>
<li>Aspect（切面）：接入点和通知的结合</li>
</ul>
<h3><span id="dai-li-xuan-ze">代理选择</span><a href="#dai-li-xuan-ze" class="header-anchor">#</a></h3><p>spring根据目标类是否实现了接口来决定采用哪种动态代理方式：JDK动态代理、CGLib</p>
<h3><span id="ji-yu-xml-de-aop-pei-zhi">基于XML的AOP配置</span><a href="#ji-yu-xml-de-aop-pei-zhi" class="header-anchor">#</a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置IOC</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 dao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbAssit"</span> <span class="attr">ref</span>=<span class="string">"dbAssit"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据库操作对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dbAssit"</span> <span class="attr">class</span>=<span class="string">"com.dbassit.DBAssit"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 指定 connection 和线程绑定 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useCurrentConnection"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///paul"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>制作通知</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个 DBAssit</span></span><br><span class="line">    <span class="keyword">private</span> DBAssit dbAssit ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDbAssit</span><span class="params">(DBAssit dbAssit)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.dbAssit = dbAssit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开启事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	dbAssit.getCurrentConnection().setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        	e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	dbAssit.getCurrentConnection().commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        	e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	dbAssit.getCurrentConnection().rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        	e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	dbAssit.releaseConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        	e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置步骤：</p>
<ol>
<li><p>通知类bean IOC配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"com.utils.TransactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbAssit"</span> <span class="attr">ref</span>=<span class="string">"dbAssit"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>aop配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(public void com.service.impl.AccountServiceImpl.transfer(java.lang.String,java.lang.String, java.lang.Float))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">ref</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beginTransaction"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通知类型：</p>
<p>aop:before/aop:after-returning/aop:after-throwing/aop:after</p>
</li>
<li><p>切入点表达式说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execution:匹配方法的执行(常用)</span><br><span class="line">execution(表达式)</span><br><span class="line">表达式语法： execution([修饰符] 返回值类型 包名.类名.方法名(参数))</span><br><span class="line">写法说明：</span><br><span class="line">全匹配方式：</span><br><span class="line">public void</span><br><span class="line">com.itheima.service.impl.AccountServiceImpl.saveAccount(com.itheima.domain.Account)</span><br><span class="line">访问修饰符可以省略</span><br><span class="line">void</span><br><span class="line">com.itheima.service.impl.AccountServiceImpl.saveAccount(com.itheima.domain.Account)</span><br><span class="line">返回值可以使用*号，表示任意返回值</span><br><span class="line">*</span><br><span class="line">com.itheima.service.impl.AccountServiceImpl.saveAccount(com.itheima.domain.Account)</span><br><span class="line">包名可以使用*号，表示任意包，但是有几级包，需要写几个*</span><br><span class="line">* *.*.*.*.AccountServiceImpl.saveAccount(com.itheima.domain.Account)</span><br><span class="line">使用..来表示当前包，及其子包</span><br><span class="line">* com..AccountServiceImpl.saveAccount(com.itheima.domain.Account)</span><br><span class="line">类名可以使用*号，表示任意类</span><br><span class="line">* com..*.saveAccount(com.itheima.domain.Account)</span><br><span class="line">方法名可以使用*号，表示任意方法</span><br><span class="line">* com..*.*( com.itheima.domain.Account)</span><br><span class="line">参数列表可以使用*，表示参数可以是任意数据类型，但是必须有参数</span><br><span class="line">* com..*.*(*)</span><br><span class="line">参数列表可以使用..表示有无参数均可，有参数可以是任意类型</span><br><span class="line">* com..*.*(..)</span><br><span class="line">全通配方式：</span><br><span class="line">* *..*.*(..)</span><br><span class="line">注：</span><br><span class="line">通常情况下，我们都是对业务层的方法进行增强，所以切入点表达式都是切到业务层实现类。</span><br><span class="line">execution(* com.itheima.service.impl.*.*(..))</span><br></pre></td></tr></table></figure>
</li>
<li><p>环绕通知</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.itheima.service.impl.*.*(..))"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">ref</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置环绕通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"transactionAround"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span></span></span><br></pre></td></tr></table></figure>

<p>环绕通知是spring框架提供的一种可以在代码中手动控制增强代码什么时候执行的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 环绕通知</span></span><br><span class="line"><span class="comment">* spring 框架为我们提供了一个接口：ProceedingJoinPoint，它可以作为环绕通知的方法参数。</span></span><br><span class="line"><span class="comment">* 在环绕通知执行时， spring 框架会为我们提供该接口的实现类对象，我们直接使用就行。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transactionAround</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义返回值</span></span><br><span class="line">    Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取方法执行所需的参数</span></span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        <span class="comment">//前置通知：开启事务</span></span><br><span class="line">        beginTransaction();</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        rtValue = pjp.proceed(args);</span><br><span class="line">        <span class="comment">//后置通知：提交事务</span></span><br><span class="line">        commit();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Throwable e) &#123;</span><br><span class="line">        <span class="comment">//异常通知：回滚事务</span></span><br><span class="line">        rollback();</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//最终通知：释放资源</span></span><br><span class="line">        release();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rtValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3><span id="ji-yu-zhu-jie-de-aop-pei-zhi">基于注解的AOP配置</span><a href="#ji-yu-zhu-jie-de-aop-pei-zhi" class="header-anchor">#</a></h3><p>配置文件中导入context的名称空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据库操作对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dbAssit"</span> <span class="attr">class</span>=<span class="string">"com.itheima.dbassit.DBAssit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定 connection 和线程绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useCurrentConnection"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///paul"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的业务层实现类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的持久层实现类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DBAssit dbAssit ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件指定spring要扫描的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置步骤：</p>
<ol>
<li><p>通知类也使用注解配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 事务控制类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"txManager"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个 DBAssit</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DBAssit dbAssit ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注解声明切面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 事务控制类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"txManager"</span>)</span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//表明当前类是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个 DBAssit</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DBAssit dbAssit ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在增强的方法上使用 注解配置通知</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启事务</span></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"execution(* com.itheima.service.impl.*.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    	dbAssit.getCurrentConnection().setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    	e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning</span>(<span class="string">"execution(* com.itheima.service.impl.*.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    	dbAssit.getCurrentConnection().commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    	e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@AfterThrowing</span>(<span class="string">"execution(* com.itheima.service.impl.*.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    	dbAssit.getCurrentConnection().rollback();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    	e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After</span>(<span class="string">"execution(* com.itheima.service.impl.*.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    	dbAssit.releaseConnection();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    	e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置文件开启注解AOP支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>环绕通知注解配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"execution(* com.service.impl.*.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transactionAround</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义返回值</span></span><br><span class="line">    Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取方法执行所需的参数</span></span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        <span class="comment">//前置通知：开启事务</span></span><br><span class="line">        beginTransaction();</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        rtValue = pjp.proceed(args);</span><br><span class="line">        <span class="comment">//后置通知：提交事务</span></span><br><span class="line">        commit();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Throwable e) &#123;</span><br><span class="line">        <span class="comment">//异常通知：回滚事务</span></span><br><span class="line">        rollback();</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//最终通知：释放资源</span></span><br><span class="line">        release();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rtValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>切入点表达式注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.service.impl.*.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>引用方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"pt1()"</span>)<span class="comment">//注意：千万别忘了写括号</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transactionAround</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义返回值</span></span><br><span class="line">    Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取方法执行所需的参数</span></span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        <span class="comment">//前置通知：开启事务</span></span><br><span class="line">        beginTransaction();</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        rtValue = pjp.proceed(args);</span><br><span class="line">        <span class="comment">//后置通知：提交事务</span></span><br><span class="line">        commit();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Throwable e) &#123;</span><br><span class="line">        <span class="comment">//异常通知：回滚事务</span></span><br><span class="line">        rollback();</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//最终通知：释放资源</span></span><br><span class="line">        release();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rtValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3><span id="bu-shi-yong-xml-pei-zhi-fang-shi">不使用XML配置方式</span><a href="#bu-shi-yong-xml-pei-zhi-fang-shi" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"com"</span>)</span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring学习笔记5：代理模式</title>
    <url>/2019/12/22/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05%EF%BC%9A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<center>Java代理模式小撇步</center>
<a id="more"></a>

<!--toc-->

<h2><span id="dai-li-mo-shi-ding-yi">代理模式定义</span><a href="#dai-li-mo-shi-ding-yi" class="header-anchor">#</a></h2><p>为其他对象提供一种代理以控制对这个对象的访问</p>
<h2><span id="jing-tai-dai-li">静态代理</span><a href="#jing-tai-dai-li" class="header-anchor">#</a></h2><p>指预先确定了代理与被代理者的关系，即在<strong>编译期</strong>就确定了。</p>
<p>例：翻片马诉讼，律师代理</p>
<p>首先定义一个代表诉讼的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILawSuit</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">submit</span><span class="params">(String proof)</span></span>;<span class="comment">//提起诉讼</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">defend</span><span class="params">()</span></span>;<span class="comment">//辩护</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>翻片马诉讼类型，实现ILawSuit接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanPianMaSuit</span> <span class="keyword">implements</span> <span class="title">ILawSuit</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(String proof)</span></span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"证据如下：%s"</span>,proof));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defend</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"铁证如山，%s还钱"</span>,<span class="string">"XXX"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代理律师诉讼类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyLawyer</span> <span class="keyword">implements</span> <span class="title">ILawSuit</span></span>&#123;</span><br><span class="line">    ILawSuit plaintiff;<span class="comment">//持有要代理的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyLawyer</span><span class="params">(ILawSuit plaintiff)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.plaintiff = plaintiff;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(String proof)</span></span>&#123;</span><br><span class="line">        plaintiff.submit(proof);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defend</span><span class="params">()</span></span>&#123;</span><br><span class="line">        plaintiff.defend();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>产生代理对象的静态代理工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ILawSuit <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProxyLawyer(<span class="keyword">new</span> FanPianMaSuit());<span class="comment">//代理关系在编译期就确定</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基本构建代理关系，在客户端可以使用代理对象进行操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ProxyFactory.getProxy().submit(<span class="string">"工资流水在此"</span>);</span><br><span class="line">        ProxyFactory.getProxy().defend();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代理律师全权代理了翻片马的诉讼活动。</p>
<h2><span id="dong-tai-dai-li">动态代理</span><a href="#dong-tai-dai-li" class="header-anchor">#</a></h2><p>代理与被代理人的关系动态确定。例如，翻片马在开庭当天选择了一个律师，即<strong>运行期</strong>确定</p>
<p>那既然动态代理没有为我们增强代理方面的任何功能，那我们为什么还要用动态代理呢，静态代理不是挺好的吗？凡是动态确定的东西大概都具有灵活性，强扩展的优势。上面的例子中如果牛翠花也使用静态代理的话，那么就需要再添加两个类。一个是牛翠花诉讼类，一个是牛翠花的代理律师类，还需要在代理静态工厂中添加一个方法。而如果使用动态代理的话，就只需要生成一个诉讼类就可以了，全程只需要一个代理律师类，因为我们可以动态的将很多人的案子交给这个律师来处理。</p>
<h2><span id="jdk-dong-tai-dai-li">JDK动态代理</span><a href="#jdk-dong-tai-dai-li" class="header-anchor">#</a></h2><p>Java动态代理机制中，有两个重要的类或接口，一个是InvocationHandler接口，另一个是Proxy类，这个类和接口是实现动态代理必须用到的。</p>
<p>InvocationHandler接口是给动态代理类实现的，负责处理被代理对象的操作的，Proxy是用来创建动态代理类实例对象的，因为只有得到了这个对象才能调用那些需要代理的方法。</p>
<ol>
<li><p>构建一个牛翠花诉讼类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuiHuaNiu</span> <span class="keyword">implements</span> <span class="title">ILawSuit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(String proof)</span></span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"老板欠薪跑路，证据如下：%s"</span>,proof));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defend</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"铁证如山，XXX换钱"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>构建一个动态代理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynProxyLawyer</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;<span class="comment">//被代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynProxyLawyer</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method,Object[] args)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"案件进展："</span> + method.getName());</span><br><span class="line">        Object result = method.invoke(target,args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>静态工厂方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getDynProxy</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> DynProxyLawyer(target);</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>客户端使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ILawSuit proxy = (ILawSuit)ProxyFactory.getDynProxy(<span class="keyword">new</span> CuiHuaNiu());</span><br><span class="line">        proxy.submit(<span class="string">"工资流水在此"</span>);</span><br><span class="line">        proxy.defend();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2><span id="jdk-dong-tai-dai-li-shi-xian-de-yuan-li">JDK动态代理实现的原理</span><a href="#jdk-dong-tai-dai-li-shi-xian-de-yuan-li" class="header-anchor">#</a></h2><p>jdk动态代理实现方法是依赖于<strong>接口</strong>的，首先使用接口来定义好操作的规范然后通过 Proxy类产生代理对象调用被代理对象的操作，而这个操作又被分发给InvocationHandler接口的invoke方法具体执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy,Method method,Object[] args)</span> <span class="keyword">throws</span> Throwable</span>;</span><br></pre></td></tr></table></figure>

<p>此方法的参数含义如下：</p>
<p>proxy:动态代理对象</p>
<p>method：正在执行的方法</p>
<p>args：当前执行方法传入的实参</p>
<p>返回值：当前执行方法的返回值</p>
<p>上例中：使用Proxy类的newProxyInstance()方法生成代理对象proxy去调用了proxy.submit()；那么系统会将此方法分发给invoke()，其中proxy对象的类是系统帮我们动态生成的，其实现了我们的业务接口ILawSuit。</p>
<h2><span id="cglib-de-dong-tai-dai-li-shi-xian">cglib的动态代理实现</span><a href="#cglib-de-dong-tai-dai-li-shi-xian" class="header-anchor">#</a></h2><p>由于JDK只能针对实现了接口的类做动态代理，而不能对没有实现接口的类做动态代理，所以cglib横空出世！CGLib（Code Generation Library）是一个强大、高性能的Code生成类库，它可以在程序运行期间动态扩展类或接口，它的底层是使用java字节码操作框架ASM实现。</p>
<ol>
<li><p>引入cglib库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib-nodep<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义业务类，被代理的类没有实现接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Frank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(String proof)</span></span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"老板欠薪跑路，证据如下：%s"</span>,proof));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defend</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"铁证如山，%s换钱，"</span>,<span class="string">"XXX"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义拦截器，在调用目标方法时，CGLib会回调MethodInterceptor接口方法拦截，来实现自己的代理逻辑，类似JDK中的InvocationHandler接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cglibDynProxyLawyer</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] params, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(method.getName().equals(<span class="string">"submit"</span>))</span><br><span class="line">            System.out.println(<span class="string">"案件提交成功，证据如下："</span> + Arrays.asList(params));</span><br><span class="line">        Object result = methodProxy.invokeSuper(o,params);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义动态代理工厂，生成动态代理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getCglibDynProxy</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(target.getClass());</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> cglibDynProxyLawyer());</span><br><span class="line">        Object targetProxy = enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> targetProxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>客户端调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frank cProxy = (Frank)ProxyFactory.getCglibDynProxy(<span class="keyword">new</span> Frank());</span><br><span class="line">        cProxy.submit(<span class="string">"工资流水在此"</span>);</span><br><span class="line">        cProxy.defend();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">案件提交成功，证据如下：[工资流水在此]</span><br><span class="line">老板欠薪跑路，证据如下：工资流水在此</span><br><span class="line">铁证如山，XXX换钱，</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>cglib对没有实现任何接口的类做动态代理，达到了和实现接口的一样的结果。</p>
<h2><span id="cglib-de-dong-tai-dai-li-yuan-li">cgLib的动态代理原理</span><a href="#cglib-de-dong-tai-dai-li-yuan-li" class="header-anchor">#</a></h2><p>动态生成一个要代理的子类，子类重写要代理的类的所有不是final的方法。在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑，它比使用java反射的JDK动态代理要快。</p>
<p>CGLIB底层：使用字节码处理框架ASM，来转换字节码并生成新的类。</p>
<p>CGLIB缺点：对于final方法，无法进行处理</p>
<h2><span id="dong-tai-dai-li-zai-aop-zhong-de-ying-yong">动态代理在AOP中的应用</span><a href="#dong-tai-dai-li-zai-aop-zhong-de-ying-yong" class="header-anchor">#</a></h2><p>理解AOP首先理解什么是切面耦合（cross-cultting concerns）。例如要求在程序中所有方法名称以test开头的方法打印一句log，这个行为就是一个典型的cross-cutting场景。</p>
<p>例如上述案例，希望在起诉成功后打印一句成功的log，如果不使用代理，需要讲log写在相应的业务逻辑里面，例如submit()方法中。</p>
<p>使用动态代理后，只需要在InvocationHandler里面的invoke()方法中写就可以了，不会侵入业务代码当中，在维护时对业务毫无影响。</p>
<p>AOP主要用于：日志记录，性能统计，安全控制，事务处理，异常处理等场景下。</p>
]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring学习笔记4：crud实例</title>
    <url>/2019/12/15/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04%EF%BC%9Acrud%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<center>crud实例</center>


<a id="more"></a>

<!--toc-->

<h1><span id="ji-yu-xml-de-ioc-pei-zhi">基于XML的IOC配置</span><a href="#ji-yu-xml-de-ioc-pei-zhi" class="header-anchor">#</a></h1><h3><span id="maven-yi-lai">maven依赖</span><a href="#maven-yi-lai" class="header-anchor">#</a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3><span id="chuang-jian-shu-ju-ku-bian-xie-shi-ti-lei">创建数据库、编写实体类</span><a href="#chuang-jian-shu-ju-ku-bian-xie-shi-ti-lei" class="header-anchor">#</a></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">account</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">40</span>),</span><br><span class="line">money <span class="built_in">float</span></span><br><span class="line">)<span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">account</span>(<span class="keyword">name</span>,money) <span class="keyword">values</span>(<span class="string">'aaa'</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">account</span>(<span class="keyword">name</span>,money) <span class="keyword">values</span>(<span class="string">'bbb'</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">account</span>(<span class="keyword">name</span>,money) <span class="keyword">values</span>(<span class="string">'ccc'</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Float money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="chi-jiu-ceng">持久层</span><a href="#chi-jiu-ceng" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRunner</span><span class="params">(QueryRunner runner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.runner = runner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">"select * from account"</span>,<span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">"select * from account where id = ? "</span>,<span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">accountId</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">"insert into account(name,money) values(?,?)"</span>,account.getName(),account.getMoney());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">"update  account set name=?,money=? where id=?"</span>,account.getName(),account.getMoney(),account.getId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">"delete from account where id=?"</span>,accountId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="ye-wu-ceng">业务层</span><a href="#ye-wu-ceng" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(IAccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAllAccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteAccount(accountId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="pei-zhi-wen-jian">配置文件</span><a href="#pei-zhi-wen-jian" class="header-anchor">#</a></h3><p>bean.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3><span id="pei-zhi-bu-zou">配置步骤</span><a href="#pei-zhi-bu-zou" class="header-anchor">#</a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 业务层Service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入dao--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入QueryRunner--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"runner"</span> <span class="attr">ref</span>=<span class="string">"runner"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"runner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接数据库必备信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/paul"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3><span id="ce-shi">测试</span><a href="#ce-shi" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">        <span class="keyword">for</span>(Account account : accounts)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="ji-yu-zhu-jie-de-ioc-pei-zhi">基于注解的IOC配置</span><a href="#ji-yu-zhu-jie-de-ioc-pei-zhi" class="header-anchor">#</a></h1><h3><span id="pei-zhi-wen-jian">配置文件</span><a href="#pei-zhi-wen-jian" class="header-anchor">#</a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3><span id="pei-zhi-bu-zou">配置步骤</span><a href="#pei-zhi-bu-zou" class="header-anchor">#</a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--告知spring在创建容器时要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置QueryRunner--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"runner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接数据库必备信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/paul"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3><span id="zhu-jie-pei-zhi-guan-li-de-zi-yuan">注解配置管理的资源</span><a href="#zhu-jie-pei-zhi-guan-li-de-zi-yuan" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAllAccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteAccount(accountId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">"select * from account"</span>,<span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">"select * from account where id = ? "</span>,<span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">accountId</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">"insert into account(name,money) values(?,?)"</span>,account.getName(),account.getMoney());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">"update  account set name=?,money=? where id=?"</span>,account.getName(),account.getMoney(),account.getId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">"delete from account where id=?"</span>,accountId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="chang-yong-zhu-jie-chuang-jian-dui-xiang">常用注解（创建对象）</span><a href="#chang-yong-zhu-jie-chuang-jian-dui-xiang" class="header-anchor">#</a></h3><p>相当于<bean id class></bean></p>
<h4><span id="component">@Component</span><a href="#component" class="header-anchor">#</a></h4><p>作用：把资源让spring来管理，相当于在xml配置一个bean</p>
<p>属性：value：指定bean的id。如果不指定，默认id是当前类的类名，首字母小写</p>
<h4><span id="controller-service-repository">@Controller @Service @Repository</span><a href="#controller-service-repository" class="header-anchor">#</a></h4><p>与Component作用属性一样，只是提供更明确语义</p>
<p>​        @Controller： 一般用于表现层的注解。<br>​        @Service： 一般用于业务层的注解。<br>​        @Repository： 一般用于持久层的注解。 </p>
<p>细节：如果注解中有且只有一个属性要赋值时，且名称是value，value在赋值时可以不写 </p>
<h3><span id="zhu-ru-shu-ju-zhu-jie">注入数据注解</span><a href="#zhu-ru-shu-ju-zhu-jie" class="header-anchor">#</a></h3><p>相当于<property name ref><property name value></property></property></p>
<h4><span id="autowired">@Autowired</span><a href="#autowired" class="header-anchor">#</a></h4><p>作用：自动按照类型注入。当使用注解注入属性时，set方法可以省略。它只能注入其他bean类型。当有多个类型匹配时，使用要注入的对象变量名称作为bean的id，在spring容器中查找，也可以注入成功，找不到就报错。</p>
<h4><span id="qualifier">@Qualifier</span><a href="#qualifier" class="header-anchor">#</a></h4><p>作用：在自动按照类型注入的基础之上，再按照 Bean 的 id 注入。它在给字段注入时不能独立使用，必须和@Autowire 一起使用；但是给方法参数注入时，可以独立使用。<br>属性：value：指定 bean 的 id。  </p>
<h4><span id="resource">@Resource</span><a href="#resource" class="header-anchor">#</a></h4><p>作用：直接按照 Bean 的 id 注入。它也只能注入其他 bean 类型。<br>属性：name：指定 bean 的 id。  </p>
<h4><span id="value">@Value</span><a href="#value" class="header-anchor">#</a></h4><p>作用：注入基本数据类型和 String 类型数据的<br>属性：value：用于指定值  </p>
<h3><span id="yong-yu-gai-bian-zuo-yong-fan-wei">用于改变作用范围</span><a href="#yong-yu-gai-bian-zuo-yong-fan-wei" class="header-anchor">#</a></h3><p>相当于<bean id class scope></bean></p>
<h4><span id="scope">@Scope</span><a href="#scope" class="header-anchor">#</a></h4><p>作用：指定 bean 的作用范围。<br>属性：value：指定范围的值。取值： singleton prototype request session globalsession  </p>
<h3><span id="he-sheng-ming-zhou-qi-xiang-guan">和生命周期相关</span><a href="#he-sheng-ming-zhou-qi-xiang-guan" class="header-anchor">#</a></h3><p>相当于<bean id class init-method destroy-method></bean></p>
<h4><span id="postconstruct">@PostConstruct</span><a href="#postconstruct" class="header-anchor">#</a></h4><p>作用：用于指定初始化方法  </p>
<h4><span id="predestroy">@PreDestroy</span><a href="#predestroy" class="header-anchor">#</a></h4><p>作用：用于指定销毁方法。  </p>
<h2><span id="chun-zhu-jie-fang-shi">纯注解方式</span><a href="#chun-zhu-jie-fang-shi" class="header-anchor">#</a></h2><h3><span id="configuration">@Configuration</span><a href="#configuration" class="header-anchor">#</a></h3><p>作用：用于指定当前类是一个 spring 配置类， 当创建容器时会从该类上加载注解。 获取容器时需要使用AnnotationApplicationContext(有@Configuration 注解的类.class)。<br>属性：value:用于指定配置类的字节码  </p>
<h3><span id="componentscan">@ComponentScan</span><a href="#componentscan" class="header-anchor">#</a></h3><p>作用：用于指定 spring 在初始化容器时要扫描的包。 作用和在 spring 的 xml 配置文件中的：<br>&lt;context:component-scan base-package=”com.itheima”/&gt;是一样的。<br>属性：basePackages：用于指定要扫描的包。和该注解中的 value 属性作用一样。  </p>
<h3><span id="bean">@Bean</span><a href="#bean" class="header-anchor">#</a></h3><p>作用：该注解只能写在方法上，表明使用此方法创建一个对象，并且放入 spring 容器。<br>属性：name：给当前@Bean 注解方法创建的对象指定一个名称(即 bean 的 id）。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个QueryRunner对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"runner"</span>)</span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)<span class="comment">//细节</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">createQueryRunner</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        ds.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        ds.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/paul"</span>);</span><br><span class="line">        ds.setUser(<span class="string">"root"</span>);</span><br><span class="line">        ds.setPassword(<span class="string">"123"</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="propertysource">@PropertySource</span><a href="#propertysource" class="header-anchor">#</a></h3><p>作用：用于加载.properties 文件中的配置。例如我们配置数据源时，可以把连接数据库的信息写到<br>properties 配置文件中，就可以使用此注解指定 properties 配置文件的位置。<br>属性：value[]：用于指定 properties 文件位置。如果是在类路径下，需要写上 classpath:  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String driver;</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String url;</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span>(name=<span class="string">"dataSource"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">			ds.setDriverClass(driver);</span><br><span class="line">			ds.setJdbcUrl(url);</span><br><span class="line">			ds.setUser(username);</span><br><span class="line">			ds.setPassword(password);</span><br><span class="line">			<span class="keyword">return</span> ds;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="import">@Import</span><a href="#import" class="header-anchor">#</a></h3><p>作用：用于导入其他配置类，在引入其他配置类时，可以不用再写@Configuration 注解。 当然，写上也没问题。<br>属性：value[]：用于指定其他配置类的字节码。  </p>
<h3><span id="tong-guo-zhu-jie-huo-qu-rong-qi">通过注解获取容器</span><a href="#tong-guo-zhu-jie-huo-qu-rong-qi" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac =</span><br><span class="line"><span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>



<h1><span id="spring-zheng-he-junit">Spring整合Junit</span><a href="#spring-zheng-he-junit" class="header-anchor">#</a></h1><p>我们需要的是程序能自动帮我们创建容器。一旦程序能自动为我们创建 spring 容器，我们就<br>无须手动创建了，问题也就解决了。<br> junit 无法知晓我们是否使用了 spring 框架。不过好在， junit 给我们暴露了一个注解，可以让我们替换掉它的运行器。<br>这时，我们需要依靠 spring 框架，因为它提供了一个运行器，可以读取配置文件（或注解）来创建容器。我们只需要告诉它配置文件在哪就行了。  </p>
<h2><span id="huan-jing-da-jian">环境搭建</span><a href="#huan-jing-da-jian" class="header-anchor">#</a></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2><span id="runwith-ti-huan-yuan-you-yun-xing-qi">@Runwith替换原有运行器</span><a href="#runwith-ti-huan-yuan-you-yun-xing-qi" class="header-anchor">#</a></h2><h2><span id="contextconfiguration-zhi-ding-spring-pei-zhi-wen-jian-de-wei-zhi">@ContextConfiguration指定spring配置文件的位置</span><a href="#contextconfiguration-zhi-ding-spring-pei-zhi-wen-jian-de-wei-zhi" class="header-anchor">#</a></h2><p>@ContextConfiguration 注解：<br>locations 属性： 用于指定配置文件的位置。如果是类路径下，需要用 classpath:表明<br>classes 属性： 用于指定注解的类。当不使用 xml 配置时，需要用此属性指定注解类的位置。 </p>
<h2><span id="autowired-gei-ce-shi-lei-zhong-de-bian-liang-zhu-ru-shu-ju">@AutoWired给测试类中的变量注入数据</span><a href="#autowired-gei-ce-shi-lei-zhong-de-bian-liang-zhu-ru-shu-ju" class="header-anchor">#</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountService as;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">        <span class="keyword">for</span>(Account account : accounts)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring学习笔记3：spring依赖注入</title>
    <url>/2019/12/15/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%EF%BC%9Aspring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<center>spring依赖注入</center>

<a id="more"></a>

<div class="toc">

<!-- toc -->

<ul>
<li><a href="#yi-lai-zhu-ru-de-gai-nian">依赖注入的概念</a></li>
<li><a href="#gou-zao-han-shu-zhu-ru">构造函数注入</a></li>
<li><a href="#set-fang-fa-zhu-ru">set方法注入</a></li>
<li><a href="#shi-yong-p-ming-cheng-kong-jian-zhu-ru-shu-ju-ben-zhi-huan-shi-diao-yong-set-fang-fa">使用p名称空间注入数据（本质还是调用set方法）</a></li>
<li><a href="#zhu-ru-ji-he-shu-xing">注入集合属性</a></li>
</ul>
<!-- tocstop -->

</div>

<h2><span id="yi-lai-zhu-ru-de-gai-nian">依赖注入的概念</span><a href="#yi-lai-zhu-ru-de-gai-nian" class="header-anchor">#</a></h2><p>依赖注入： Dependency Injection。 它是 spring 框架核心 ioc 的具体实现。<br>我们的程序在编写时， 通过控制反转， 把对象的创建交给了 spring，但是代码中不可能出现没有依赖的情况。<br>IoC解耦只是<strong>降低</strong>他们的依赖关系，但不会消除。 例如：我们的业务层仍会调用持久层的方法。<br>那这种业务层和持久层的依赖关系， 在使用 spring 之后， 就让 spring 来维护了。<br>简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。  </p>
<h2><span id="gou-zao-han-shu-zhu-ru">构造函数注入</span><a href="#gou-zao-han-shu-zhu-ru" class="header-anchor">#</a></h2><p>即使用类中的构造函数，给成员变量赋值。注意，赋值操作不是我们自己做的，而是通过配置的方式，让spring框架来注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">(String name, Integer age, Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	System.out.println(name+<span class="string">","</span>+age+<span class="string">","</span>+birthday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用构造函数的方式，给 service 中的属性传值</span></span><br><span class="line"><span class="comment">要求：</span></span><br><span class="line"><span class="comment">	类中需要提供一个对应参数列表的构造函数。</span></span><br><span class="line"><span class="comment">涉及的标签：</span></span><br><span class="line"><span class="comment">	constructor-arg</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">    index:指定参数在构造函数参数列表的索引位置</span></span><br><span class="line"><span class="comment">    type:指定参数在构造函数中的数据类型</span></span><br><span class="line"><span class="comment">    name:指定参数在构造函数中的名称 用这个找给谁赋值</span></span><br><span class="line"><span class="comment">    =======上面三个都是找给谁赋值，下面两个指的是赋什么值的==============</span></span><br><span class="line"><span class="comment">    value:它能赋的值是基本数据类型和 String 类型</span></span><br><span class="line"><span class="comment">    ref:它能赋的值是其他 bean 类型，也就是说，必须得是在配置文件中配置过的 bean</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2><span id="set-fang-fa-zhu-ru">set方法注入</span><a href="#set-fang-fa-zhu-ru" class="header-anchor">#</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	System.out.println(name+<span class="string">","</span>+age+<span class="string">","</span>+birthday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过配置文件给 bean 中的属性传值：使用 set 方法的方式</span></span><br><span class="line"><span class="comment">涉及的标签：</span></span><br><span class="line"><span class="comment">	property</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">    name：找的是类中 set 方法后面的部分</span></span><br><span class="line"><span class="comment">    ref：给属性赋值是其他 bean 类型的</span></span><br><span class="line"><span class="comment">    value：给属性赋值是基本数据类型和 string 类型的</span></span><br><span class="line"><span class="comment">    实际开发中，此种方式用的较多。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"21"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2><span id="shi-yong-p-ming-cheng-kong-jian-zhu-ru-shu-ju-ben-zhi-huan-shi-diao-yong-set-fang-fa">使用p名称空间注入数据（本质还是调用set方法）</span><a href="#shi-yong-p-ming-cheng-kong-jian-zhu-ru-shu-ju-ben-zhi-huan-shi-diao-yong-set-fang-fa" class="header-anchor">#</a></h2><p>此种方式是通过xml中导入p名称空间，使用p：propertyName来注入数据，它的本质仍然是调用类中的set方法实现注入功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 使用 p 名称空间注入，本质还是调用类中的 set 方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl4</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	System.out.println(name+<span class="string">","</span>+age+<span class="string">","</span>+birthday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">" http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.service.impl.AccountServiceImpl4"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:name</span>=<span class="string">"test"</span> <span class="attr">p:age</span>=<span class="string">"21"</span> <span class="attr">p:birthday-ref</span>=<span class="string">"now"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2><span id="zhu-ru-ji-he-shu-xing">注入集合属性</span><a href="#zhu-ru-ji-he-shu-xing" class="header-anchor">#</a></h2><p>顾名思义，就是给类中的集合成员传值，它用的也是 set方法注入的方式，只不过变量的数据类型都是集合。 List,Set,Map,Properties。具体代码如下：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] myStrs;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; myList;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; mySet;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; myMap;</span><br><span class="line">    <span class="keyword">private</span> Properties myProps;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyStrs</span><span class="params">(String[] myStrs)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.myStrs = myStrs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.myList = myList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMySet</span><span class="params">(Set&lt;String&gt; mySet)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.mySet = mySet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.myMap = myMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyProps</span><span class="params">(Properties myProps)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.myProps = myProps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(myStrs));</span><br><span class="line">        System.out.println(myList);</span><br><span class="line">        System.out.println(mySet);</span><br><span class="line">        System.out.println(myMap);</span><br><span class="line">        System.out.println(myProps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注入集合数据</span></span><br><span class="line"><span class="comment">	List 结构的：</span></span><br><span class="line"><span class="comment">		array,list,set</span></span><br><span class="line"><span class="comment">	Map 结构的</span></span><br><span class="line"><span class="comment">		map,entry,props,prop</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在注入集合数据时，只要结构相同，标签可以互换 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给数组注入数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myStrs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入 list 集合数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入 set 集合数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mySet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入 Map 数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testA"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testB"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入 properties 数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myProps"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testA"</span> <span class="attr">value</span>=<span class="string">"aaa"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testB"</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--把对象的创建交给spring来管理--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring对bean的管理细节</span></span><br><span class="line"><span class="comment">        1.创建bean的三种方式</span></span><br><span class="line"><span class="comment">        2.bean对象的作用范围</span></span><br><span class="line"><span class="comment">        3.bean对象的生命周期</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建Bean的三种方式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一种方式：使用默认构造函数创建。</span></span><br><span class="line"><span class="comment">            在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。</span></span><br><span class="line"><span class="comment">            采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;bean id="accountService" class="com.service.impl.AccountServiceImpl"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第二种方式： 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</span></span><br><span class="line"><span class="comment">    &lt;bean id="instanceFactory" class="com.factory.InstanceFactory"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    &lt;bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)</span></span><br><span class="line"><span class="comment">    &lt;bean id="accountService" class="com.factory.StaticFactory" factory-method="getAccountService"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- bean的作用范围调整</span></span><br><span class="line"><span class="comment">        bean标签的scope属性：</span></span><br><span class="line"><span class="comment">            作用：用于指定bean的作用范围</span></span><br><span class="line"><span class="comment">            取值： 常用的就是单例的和多例的</span></span><br><span class="line"><span class="comment">                singleton：单例的（默认值）</span></span><br><span class="line"><span class="comment">                prototype：多例的</span></span><br><span class="line"><span class="comment">                request：作用于web应用的请求范围</span></span><br><span class="line"><span class="comment">                session：作用于web应用的会话范围</span></span><br><span class="line"><span class="comment">                global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;bean id="accountService" class="com.service.impl.AccountServiceImpl" scope="prototype"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- bean对象的生命周期</span></span><br><span class="line"><span class="comment">            单例对象</span></span><br><span class="line"><span class="comment">                出生：当容器创建时对象出生</span></span><br><span class="line"><span class="comment">                活着：只要容器还在，对象一直活着</span></span><br><span class="line"><span class="comment">                死亡：容器销毁，对象消亡</span></span><br><span class="line"><span class="comment">                总结：单例对象的生命周期和容器相同</span></span><br><span class="line"><span class="comment">            多例对象</span></span><br><span class="line"><span class="comment">                出生：当我们使用对象时spring框架为我们创建</span></span><br><span class="line"><span class="comment">                活着：对象只要是在使用过程中就一直活着。</span></span><br><span class="line"><span class="comment">                死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring学习笔记2：spring IOC</title>
    <url>/2019/12/15/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%EF%BC%9Aspring-IOC/</url>
    <content><![CDATA[<center>spring IOC</center>
<a id="more"></a>

<div class="toc">

<!-- toc -->

<ul>
<li><a href="#ji-ben-cheng-xu-jie-gou">基本程序结构</a><ul>
<li><a href="#chuang-jian-ye-wu-ceng-jie-kou-he-shi-xian-lei">创建业务层接口和实现类</a></li>
<li><a href="#chuang-jian-ceng-chi-jiu-ceng-jie-kou-he-shi-xian-lei">创建层持久层接口和实现类</a></li>
</ul>
</li>
<li><a href="#ji-yu-xml-pei-zhi">基于XML配置</a></li>
<li><a href="#spring-ji-yu-xml-de-ioc-xi-jie">spring基于XML的IoC细节</a><ul>
<li><a href="#beanfactory-he-applicationcontext-de-qu-bie">BeanFactory和ApplicationContext的区别</a></li>
<li><a href="#applicationcontext-jie-kou-de-shi-xian-lei">ApplicationContext接口的实现类</a></li>
<li><a href="#ioc-zhong-bean-biao-qian-he-guan-li-dui-xiang-xi-jie">IOC中bean标签和管理对象细节</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h2><span id="ji-ben-cheng-xu-jie-gou">基本程序结构</span><a href="#ji-ben-cheng-xu-jie-gou" class="header-anchor">#</a></h2><h3><span id="chuang-jian-ye-wu-ceng-jie-kou-he-shi-xian-lei">创建业务层接口和实现类</span><a href="#chuang-jian-ye-wu-ceng-jie-kou-he-shi-xian-lei" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//业务层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 保存账户（此处只是模拟，并不是真的要保存）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的业务层实现类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">new</span> AccountDaoImpl();<span class="comment">//此处的依赖关系有待解决</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		accountDao.saveAccount();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="chuang-jian-ceng-chi-jiu-ceng-jie-kou-he-shi-xian-lei">创建层持久层接口和实现类</span><a href="#chuang-jian-ceng-chi-jiu-ceng-jie-kou-he-shi-xian-lei" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的持久层接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 保存账户</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的持久层实现类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">"保存了账户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="ji-yu-xml-pei-zhi">基于XML配置</span><a href="#ji-yu-xml-pei-zhi" class="header-anchor">#</a></h2><ol>
<li><p>拷贝必备jar包到工程的lib目录中</p>
</li>
<li><p>在类的根路径下创建一个任意名称的xml文件</p>


<p>给配置文件导入约束</p>

</li>
<li><p>让spring管理资源，在配置文件中配置service和dao</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bean 标签：用于配置让 spring 创建对象，并且存入 ioc 容器之中</span></span><br><span class="line"><span class="comment">	id 属性：对象的唯一标识。</span></span><br><span class="line"><span class="comment">	class 属性：指定要创建对象的全限定类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 dao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.itheima.dao.impl.AccountDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试配置是否成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 模拟一个表现层</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用 main 方法获取容器测试执行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.使用 ApplicationContext 接口，就是在获取 spring 容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据 bean 的 id 获取对象</span></span><br><span class="line">        IAccountService aService = (IAccountService) ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        System.out.println(aService);</span><br><span class="line">        IAccountDao aDao = (IAccountDao) ac.getBean(<span class="string">"accountDao"</span>);</span><br><span class="line">        System.out.println(aDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2><span id="spring-ji-yu-xml-de-ioc-xi-jie">spring基于XML的IoC细节</span><a href="#spring-ji-yu-xml-de-ioc-xi-jie" class="header-anchor">#</a></h2><h4><span id="spring-zhong-de-gong-han-lei-jie-gou-tu">spring中的工厂类结构图</span><a href="#spring-zhong-de-gong-han-lei-jie-gou-tu" class="header-anchor">#</a></h4>



<h3><span id="beanfactory-he-applicationcontext-de-qu-bie">BeanFactory和ApplicationContext的区别</span><a href="#beanfactory-he-applicationcontext-de-qu-bie" class="header-anchor">#</a></h3><p>BeanFactory才是Spring容器中的<strong>顶层接口</strong></p>
<p>ApplicationContext是它的<strong>子接口</strong></p>
<p>区别：创建对象的时间点不一样。</p>
<p>​    ApplicationContext:只要以读取配置文件，默认情况下就会创建对象。</p>
<p>​    BeanFactory:什么时候使用什么时候创建对象。</p>
<h3><span id="applicationcontext-jie-kou-de-shi-xian-lei">ApplicationContext接口的实现类</span><a href="#applicationcontext-jie-kou-de-shi-xian-lei" class="header-anchor">#</a></h3><p>ClassPathXmlApplicationContext:它是从类的根路径下加载配置文件（推荐使用）</p>
<p>FileSystemXmlApplicationContext:它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p>
<p>AnnotationConfigApplicationContext:使用注解配置容器对象时，需要使用此类来创建spring容器，用来读取注解</p>
<h3><span id="ioc-zhong-bean-biao-qian-he-guan-li-dui-xiang-xi-jie">IOC中bean标签和管理对象细节</span><a href="#ioc-zhong-bean-biao-qian-he-guan-li-dui-xiang-xi-jie" class="header-anchor">#</a></h3><h4><span id="bean-biao-qian">bean标签</span><a href="#bean-biao-qian" class="header-anchor">#</a></h4><p>作用：<br>        用于配置对象让 spring 来创建的。<br>        默认情况下它调用的是类中的无参构造函数。如果没有无参构造函数则不能创建成功。<br>属性：<br>        id： 给对象在容器中提供一个唯一标识。用于获取对象。<br>        class： 指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数。<br>        scope： 指定对象的作用范围。</p>
<p>​            *singleton :默认值，单例的.<br>​            * prototype :多例的.<br>​            * request :WEB 项目中,Spring 创建一个 Bean 的对象,将对象存入到 request 域中.<br>​            * session :WEB 项目中,Spring 创建一个 Bean 的对象,将对象存入到 session 域中.<br>​            * global session :WEB 项目中,应用在 Portlet 环境.如果没有 Portlet 环境那么<br>​            globalSession 相当于 session.<br>​            init-method： 指定类中的初始化方法名称。<br>​            destroy-method： 指定类中销毁方法名称。  </p>
<h4><span id="bean-de-zuo-yong-fan-wei-he-sheng-ming-zhou-qi">bean的作用范围和生命周期</span><a href="#bean-de-zuo-yong-fan-wei-he-sheng-ming-zhou-qi" class="header-anchor">#</a></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">单例对象： scope="singleton"</span><br><span class="line">	一个应用只有一个对象的实例。它的作用范围就是整个引用。</span><br><span class="line">	生命周期：</span><br><span class="line">        对象出生：当应用加载，创建容器时，对象就被创建了。</span><br><span class="line">        对象活着：只要容器在，对象一直活着。</span><br><span class="line">        对象死亡：当应用卸载，销毁容器时，对象就被销毁了。</span><br><span class="line">多例对象： scope="prototype"</span><br><span class="line">	每次访问对象时，都会重新创建对象实例。</span><br><span class="line">	生命周期：</span><br><span class="line">        对象出生：当使用对象时，创建新的对象实例。</span><br><span class="line">        对象活着：只要对象在使用中，就一直活着。</span><br><span class="line">        对象死亡：当对象长时间不用时，被 java 的垃圾回收器回收了。</span><br></pre></td></tr></table></figure>

<h4><span id="shi-li-hua-bean-de-san-chong-fang-shi">实例化Bean的三种方式</span><a href="#shi-li-hua-bean-de-san-chong-fang-shi" class="header-anchor">#</a></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">第一种方式：使用默认无参构造函数</span><br><span class="line"><span class="comment">&lt;!--在默认情况下：</span></span><br><span class="line"><span class="comment">它会根据默认无参构造函数来创建类对象。如果 bean 中没有默认无参构造函数，将会创建失败。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">第二种方式： spring 管理静态工厂-使用静态工厂的方法创建对象</span><br><span class="line">/**</span><br><span class="line">* 模拟一个静态工厂，创建业务层实现类</span><br><span class="line">*/</span><br><span class="line">public class StaticFactory &#123;</span><br><span class="line">	public static IAccountService createAccountService()&#123;</span><br><span class="line">		return new AccountServiceImpl();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!-- 此种方式是:</span></span><br><span class="line"><span class="comment">使用 StaticFactory 类中的静态方法 createAccountService 创建对象，并存入 spring 容器</span></span><br><span class="line"><span class="comment">id 属性：指定 bean 的 id，用于从容器中获取</span></span><br><span class="line"><span class="comment">class 属性：指定静态工厂的全限定类名</span></span><br><span class="line"><span class="comment">factory-method 属性：指定生产对象的静态方法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.itheima.factory.StaticFactory"</span></span></span><br><span class="line"><span class="tag"><span class="attr">factory-method</span>=<span class="string">"createAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">第三种方式： spring 管理实例工厂-使用实例工厂的方法创建对象</span><br><span class="line">/**</span><br><span class="line">* 模拟一个实例工厂，创建业务层实现类</span><br><span class="line">* 此工厂创建对象，必须现有工厂实例对象，再调用方法</span><br><span class="line">*/</span><br><span class="line">public class InstanceFactory &#123;</span><br><span class="line">	public IAccountService createAccountService()&#123;</span><br><span class="line">		return new AccountServiceImpl();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!-- 此种方式是：</span></span><br><span class="line"><span class="comment">先把工厂的创建交给 spring 来管理。</span></span><br><span class="line"><span class="comment">然后在使用工厂的 bean 来调用里面的方法</span></span><br><span class="line"><span class="comment">factory-bean 属性：用于指定实例工厂 bean 的 id。</span></span><br><span class="line"><span class="comment">factory-method 属性：用于指定实例工厂中创建对象的方法。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instancFactory"</span> <span class="attr">class</span>=<span class="string">"com.itheima.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span></span></span><br><span class="line"><span class="tag"><span class="attr">factory-bean</span>=<span class="string">"instancFactory"</span></span></span><br><span class="line"><span class="tag"><span class="attr">factory-method</span>=<span class="string">"createAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>###</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>2019电影</title>
    <url>/2019/12/12/2019%E7%94%B5%E5%BD%B1/</url>
    <content><![CDATA[<center>绝不客观的影评，纯主观乱喷</center>

<a id="more"></a>

<p><strong>中国机长</strong>：蹭热度电影，凑时长痕迹过于明显，<strong>4.5</strong></p>
<p><strong>名侦探柯南：绀青之拳</strong>：情怀电影，已经忘记剧情了，<strong>5</strong></p>
<p><strong>烈火英雄</strong>：不提也罢，<strong>3</strong></p>
<p><strong>银河补习班</strong>：剧情有点平淡生硬，邓超终于没有那么浮夸了，<strong>5</strong></p>
<p><strong>狮子王</strong>：情怀电影，还原度OK，<strong>7</strong></p>
<p><strong>玩具总动员</strong>：情怀续作，略有一点惊悚元素，<strong>7</strong></p>
<p><strong>飞驰人生</strong>：后期有点抢，前期有点拖，完成度不如后会有期，<strong>6</strong></p>
<p><strong>死侍：我爱我家</strong>：印象不深了，随机打分，<strong>5.5</strong></p>
<p><strong>大黄蜂</strong>：还行，不过也说不出啥亮点，<strong>6</strong></p>
<p><strong>复仇者联盟：终局之战</strong>：时间长，场面大，情怀足，票价贵，<strong>7.5</strong></p>
<p><strong>少年的你</strong>：整体还行，粉丝电影，女反派真好看，<strong>7</strong></p>
<p><strong>双子杀手</strong>：这特么。。。李安啊，那没事了，<strong>6</strong></p>
<p><strong>小Q</strong>：看了十分钟溜了，打扰了，<strong>4</strong></p>
<p><strong>寄生虫</strong>：还行，不过吹得比较厉害，<strong>6</strong></p>
<p><strong>天气之子</strong>：论装逼还得是新海诚，<strong>6.5</strong></p>
<p><strong>绿皮书</strong>：政治正确电影，米国吃枣药丸，<strong>6.5</strong></p>
<p><strong>流浪地球</strong>：部分剧情有点突兀，据说删减严重，但是也没个导演剪辑版，<strong>6</strong></p>
<p><strong>哪吒</strong>：今年水军最多的电影了大概，完成度OK，剧情太单调了，<strong>6.5</strong></p>
<p><strong>冰雪奇缘2</strong>：跟哪吒对比一下差距还是很明显的，画面细节、剧情、音乐、IP等等，<strong>7.5</strong></p>
<p><strong>南方车站的聚会</strong>：还是很不错的，除了部分槽点，好像还有点删减，其他都挺不错的，<strong>6.5</strong></p>
<p><strong>半个喜剧</strong>：跟驴得水一样是把话剧搬到了大荧幕，挺好笑的，整体不错，就是高潮略平淡，<strong>6</strong></p>
<hr>
<p>综上，今年属实没看到啥好电影，在此推荐一部1995年四川方言喜剧《三喜临门》，元素众多，生活体验感强，为我们留下了怀念那个年代的窗口</p>
<iframe src="//player.bilibili.com/player.html?aid=18067075&cid=29497304&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
]]></content>
      <categories>
        <category>movies</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>spring学习笔记1：IOC概念，解耦思想</title>
    <url>/2019/12/11/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%EF%BC%9AIOC%E6%A6%82%E5%BF%B5%EF%BC%8C%E8%A7%A3%E8%80%A6%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<center>IOC概念，解耦思想</center>

<a id="more"></a>

<div class="toc">

<!-- toc -->

<ul>
<li><a href="#spring-de-you-shi">Spring的优势</a></li>
<li><a href="#ioc-de-gai-nian-he-zuo-yong">IoC的概念和作用</a><ul>
<li><a href="#jie-jue-ou-he-de-si-lu">解决耦合的思路</a></li>
<li><a href="#gong-han-mo-shi-jie-ou">工厂模式解耦</a></li>
<li><a href="#kong-zhi-fan-zhuan-inversion-of-control">控制反转-Inversion Of Control</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h2><span id="spring-de-you-shi">Spring的优势</span><a href="#spring-de-you-shi" class="header-anchor">#</a></h2><ul>
<li>方便解耦，简化开发</li>
<li>AOP编程的支持</li>
<li>声明式事务的支持</li>
<li>方便程序的测试</li>
<li>方便集成各种优秀框架</li>
<li>降低JavaEE API使用难度</li>
</ul>


<h2><span id="ioc-de-gai-nian-he-zuo-yong">IoC的概念和作用</span><a href="#ioc-de-gai-nian-he-zuo-yong" class="header-anchor">#</a></h2><p><strong>耦合度</strong>，是对模块间关联程度的度量。耦合强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。模块间的耦合度是指模块间的依赖关系，包括控制关系、调用关系、数据传递关系。模块间联系越多，耦合性越强，独立性越差</p>
<p>软件工程中，耦合指对象间的依赖性。软件设计中通常耦合度和内聚度作为衡量模块独立程度的标准。划分模块的一个准则就是<strong>高内聚低耦合</strong>。</p>
<p>开发中，有些依赖是必须的，有些可以通过优化代码来解除。</p>
<p>实际开发中，应该做到：<strong>编译器不依赖，运行期才依赖</strong></p>
<p>解耦思路：</p>
<ol>
<li>使用<strong>反射</strong>来创建对象，而避免使用new关键字</li>
<li>通过读取配置文件来获取要创建的对象全限定类名</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        <span class="comment">//DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/paul"</span>,<span class="string">"root"</span>,<span class="string">"123"</span>);</span><br><span class="line">        <span class="comment">//3.获取操作数据库的预处理对象</span></span><br><span class="line">        PreparedStatement pstm = conn.prepareStatement(<span class="string">"select * from account"</span>);</span><br><span class="line">        <span class="comment">//4.执行SQL，得到结果集</span></span><br><span class="line">        ResultSet rs = pstm.executeQuery();</span><br><span class="line">        <span class="comment">//5.遍历结果集</span></span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        rs.close();</span><br><span class="line">        pstm.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不使用DriverManager的register方法，而是采用Class.forName的方式：</p>
<p>​    类依赖了数据库的具体驱动类（MySQL），如果更换了数据库品牌，需要修改源码来重新数据库驱动。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span>  <span class="keyword">implements</span> <span class="title">IAccountService</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">new</span> AccountDaoImpl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码表示：业务层调用持久层，并且此时业务层在依赖持久层的接口和实现类。如果此时没有持久层实现类，编译将不能通过。这种编译器依赖关系，应该在我们开发中杜绝。我们需要优化代码解决。</p>
<h3><span id="jie-jue-ou-he-de-si-lu">解决耦合的思路</span><a href="#jie-jue-ou-he-de-si-lu" class="header-anchor">#</a></h3><p>使用反射来注册驱动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br></pre></td></tr></table></figure>

<p>此时好处：我们的类中不再依赖具体的驱动类，此时就算删除mysql的驱动jar包，依然可以编译（不能运行）</p>
<p>同时，产生一个新问题，mysql驱动的全限定类名字符串是在Java类中写死的，一旦要改还是要修改源码。</p>
<p>解决这个问题 –&gt;&gt;  使用配置文件配置</p>
<h3><span id="gong-han-mo-shi-jie-ou">工厂模式解耦</span><a href="#gong-han-mo-shi-jie-ou" class="header-anchor">#</a></h3><p>实际开发中，可以把三层对象使用配置文件配置起来，当启动服务器应用加载时，让一个类中的方法通过读取配置文件，把这些对象创建出来<strong>并存起来</strong>，接下来使用的时候，直接拿过来用就好了。</p>
<p><strong>读取配置文件，创建和获取三层对象的类就是工厂</strong></p>
<p>一个创建Bean对象的工厂，Bean:计算机英语中，有可重用组件的含义，JavaBean：用Java语言编写的可重用组件。javabean  &gt;  实体类</p>
<p>它就是创建service和dao对象的。</p>
<ol>
<li>需要一个配置文件来配置service和dao配置的内容：唯一标识=全限定类名（key=value）</li>
<li>通过读取配置文件中配置的内容，反射创建对象</li>
</ol>
<p>配置文件可以是xml或properties</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个Map,用于存放我们要创建的对象。我们把它称之为容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; beans;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span><br><span class="line">            props.load(in);</span><br><span class="line">            <span class="comment">//实例化容器</span></span><br><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">            <span class="comment">//取出配置文件中所有的Key</span></span><br><span class="line">            Enumeration keys = props.keys();</span><br><span class="line">            <span class="comment">//遍历枚举</span></span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">                <span class="comment">//取出每个Key</span></span><br><span class="line">                String key = keys.nextElement().toString();</span><br><span class="line">                <span class="comment">//根据key获取value</span></span><br><span class="line">                String beanPath = props.getProperty(key);</span><br><span class="line">                <span class="comment">//反射创建对象</span></span><br><span class="line">                Object value = Class.forName(beanPath).newInstance();</span><br><span class="line">                <span class="comment">//把key和value存入容器中</span></span><br><span class="line">                beans.put(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的名称获取对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Bean的名称获取bean对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public static Object getBean(String beanName)&#123;</span></span><br><span class="line"><span class="comment">        Object bean = null;</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            String beanPath = props.getProperty(beanName);</span></span><br><span class="line"><span class="comment">//            System.out.println(beanPath);</span></span><br><span class="line"><span class="comment">            bean = Class.forName(beanPath).newInstance();//每次都会调用默认构造函数创建对象</span></span><br><span class="line"><span class="comment">        &#125;catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return bean;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>bean.properties</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">accountService=com.itheima.service.impl.AccountServiceImpl</span><br><span class="line">accountDao=com.itheima.dao.impl.AccountDaoImpl</span><br></pre></td></tr></table></figure>

<h3><span id="kong-zhi-fan-zhuan-inversion-of-control">控制反转-Inversion Of Control</span><a href="#kong-zhi-fan-zhuan-inversion-of-control" class="header-anchor">#</a></h3><h4><span id="cun-na-li">存哪里</span><a href="#cun-na-li" class="header-anchor">#</a></h4><p>由于很多对象，需要一个集合存起来，在应用加载时，创建一个Map,用于存放三层对象，这个map称之为容器</p>
<h4><span id="gong-han">工厂</span><a href="#gong-han" class="header-anchor">#</a></h4><p>工厂就是负责给我们从容器中获取指定对象的类。这时候我们获取对象的方式发生了改变。</p>
<p>从 new （主动）到 获取对象时跟工厂要，由工厂为我们查找或者创建对象（被动）</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
</search>
